<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MYSQL3</title>
    <url>/2024/10/06/MYSQL3/</url>
    <content><![CDATA[<h1 id="MYSQL3"><a href="#MYSQL3" class="headerlink" title="MYSQL3"></a>MYSQL3</h1><span id="more"></span>
<h1 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc:"></a>jdbc:</h1><pre><code>java
db 
connction
</code></pre>
<h1 id="maven部署："><a href="#maven部署：" class="headerlink" title="maven部署："></a>maven部署：</h1><pre><code>1.下载 解压 

2.配置环境变量
    MAVEN_HOME=D:\sxwang\app\apache-maven-3.8.1
    PATH=%MAVEN_HOME%\bin
3.cmd 
</code></pre>
<h1 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h1><pre><code>1.创建maven 项目 
2.src =》 开发代码目录
3.pom.xml : 
    添加第三方依赖包
</code></pre>
<h1 id="如何获取mysql连接？"><a href="#如何获取mysql连接？" class="headerlink" title="如何获取mysql连接？"></a>如何获取mysql连接？</h1><pre><code>1.url ： 
    mysql ip 
    mysql db 
2.mysql 用户名 
3.mysql 密码
</code></pre>
<h1 id="添加第三方依赖包"><a href="#添加第三方依赖包" class="headerlink" title="添加第三方依赖包:"></a>添加第三方依赖包:</h1><pre><code>mysql的驱动包： 
    maven进行第三方jar管理： 
        mysql-

        &lt;dependency&gt;
            &lt;groupId&gt;mysql&lt;/groupId&gt;
            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
            &lt;version&gt;5.1.28&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>
<p>问题：<br>    1.pom.xml:<br>        可能正在下载第三方jar  </p>
<pre><code>2.更改本地maven 仓库地址 
    D:\sxwang\app\apache-maven-3.8.1\conf\settings.xml
</code></pre>
<h1 id="操作mysql"><a href="#操作mysql" class="headerlink" title="操作mysql:"></a>操作mysql:</h1><pre><code>1.crud 
 insert、delete、update、select 

    获取连接：
        1.准备sql
            1. insert、delete、update
            2.select
        2.执行sql
            1. insert、delete、update
            2.select
</code></pre>
<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL:"></a>MySQL:</h1><pre><code>    1.ddl: 
        1.alter: 
            1.db 
                ALTER &#123;DATABASE | SCHEMA&#125; [db_name]
                alter database bigdata CHARACTER SET = &#39;utf8&#39;;
            2.table: 
                1.添加字段
                    alter table a1 add column column_add varchar(20) after address;
                    alter table a1 add column column_add01 varchar(20) first ;
                2.修改字段：
                    1.name 
                    2.type 
                    alter table a1 CHANGE COLUMN column_add01 column_add01 int(3);
                3.删除字段：【一般不会发生】 
                    alter table a1 DROP  column_add01;

        2.truncate  =&gt; 清空表
            delete
                1.truncate table a1;

        3.create table 
            1.CREATE TABLE ... LIKE Statement =&gt; 只拷贝 表结构
                eg:
                    CREATE TABLE emp_dev LIKE emp;
            2.CREATE TABLE ... SELECT Statement =》 比较多 临时查询的结果 临时生成一个表
                ctas：
                    CREATE TABLE new_tbl [AS] SELECT * FROM orig_tbl;
                create table emp_dev01 as select ename,job from emp;
```		
    2.dml
        1.insert 
        insert into table_name [(columns)]values(value_list,...)

        a b 表结构是一样： 
            需求： 
                两张表 ， a有数据，b没有数据 
                把a表数据导入b数据？ 
            
            insert into b (name,age) 
            select name,age from a;

            emp a1  
            insert into a1(name,address)
            select ename,job from emp;




</code></pre>
]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
  </entry>
  <entry>
    <title>git2</title>
    <url>/2024/10/06/git2/</url>
    <content><![CDATA[<h1 id="git2"><a href="#git2" class="headerlink" title="git2"></a>git2</h1><span id="more"></span>
<p>练习：<br>    编写一个小项目 ，提交到git本地仓库 </p>
<pre><code>工作区： 开发代码 
        =》 git add xxx
暂存区 ： 暂时存放我们开发的代码文件 
        =》 git commit 
本地仓库:存放各个版本的历史

-- 前端项目 github 下载 html 项目
</code></pre>
<h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><p>git init music</p>
<p>2.– 添加一个index.html文件<br>git add index.html<br>git commit -m “Add index.html”<br>git log</p>
<h1 id="编写其他文件"><a href="#编写其他文件" class="headerlink" title="编写其他文件"></a>编写其他文件</h1><p>git status<br>git add font&#x2F;  icon&#x2F; image&#x2F; music&#x2F;<br>git status<br>git commit -m “Add other data”<br>git status<br>git log</p>
<h1 id="添加页面样式"><a href="#添加页面样式" class="headerlink" title="添加页面样式"></a>添加页面样式</h1><p>git status<br>git add  script.js  style.css<br>git status<br>git commit -m “Add css&amp;js”<br>git status<br>git log</p>
<h1 id="修改代码文件"><a href="#修改代码文件" class="headerlink" title="修改代码文件"></a>修改代码文件</h1><p>git status<br>修改了代码文件 新增文件<br>git status<br>git add -u<br>git status<br>git commit -m “Update”<br>git status<br>git log</p>
<p>补充：<br>    1.git add -u </p>
<pre><code>2.git log =&gt; 查看版本历史： 
</code></pre>
<p>git log  ：<br>    –reflog  &#x3D;》 查看所有操作的 commit 历史</p>
<h1 id="指定输出格式"><a href="#指定输出格式" class="headerlink" title="指定输出格式"></a>指定输出格式</h1><pre><code>format
git log --format=oneline 
git log --oneline [常用]

git log  --oneline --reflog 可以连用 
git log --oneline -n 2  显示最近几个commit

-n 2： 
    使用场景： 
        1.commit 特别多的时候 
        2.分支有关
</code></pre>
<h1 id="分支："><a href="#分支：" class="headerlink" title="分支："></a>分支：</h1><pre><code>一个分支一条线 
默认分支： 
    主分支：主线 master
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	git branch:</span><br><span class="line">		branch    List, create, or delete branches</span><br><span class="line">	</span><br><span class="line">	git branch [--color[=&lt;when&gt;] | --no-color] [--show-current]</span><br><span class="line">        [-v [--abbrev=&lt;n&gt; | --no-abbrev]]</span><br><span class="line">        [--column[=&lt;options&gt;] | --no-column] [--sort=&lt;key&gt;]</span><br><span class="line">        [--merged [&lt;commit&gt;]] [--no-merged [&lt;commit&gt;]]</span><br><span class="line">        [--contains [&lt;commit&gt;]] [--no-contains [&lt;commit&gt;]]</span><br><span class="line">        [--points-at &lt;object&gt;] [--format=&lt;format&gt;]</span><br><span class="line">        [(-r | --remotes) | (-a | --all)]</span><br><span class="line">        [--list] [&lt;pattern&gt;…​]</span><br><span class="line">git branch [--track[=(direct|inherit)] | --no-track] [-f]</span><br><span class="line">        [--recurse-submodules] &lt;branchname&gt; [&lt;start-point&gt;]</span><br><span class="line">git branch (--set-upstream-to=&lt;upstream&gt; | -u &lt;upstream&gt;) [&lt;branchname&gt;]</span><br><span class="line">git branch --unset-upstream [&lt;branchname&gt;]</span><br><span class="line">git branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt;</span><br><span class="line">git branch (-c | -C) [&lt;oldbranch&gt;] &lt;newbranch&gt;</span><br><span class="line">git branch (-d | -D) [-r] &lt;branchname&gt;…​</span><br><span class="line">git branch --edit-description [&lt;branchname&gt;]</span><br></pre></td></tr></table></figure>
<pre><code>1.创建分支 
  git branch -c dev  =&gt;默认从master直接复制来的
2.查看分支 
    git branch -v
3.切换分支
    git checkout dev 
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --oneline  master  =&gt; 指定查看某个分支的 commit 历史 </span><br><span class="line">git log --oneline --gragh  =&gt; 以图形化界面展示 分支的commit 历史</span><br><span class="line">git log --oneline --gragh --all =&gt; 以图形化界面展示 所有分支 的commit 历史</span><br><span class="line">gitk --all ：</span><br></pre></td></tr></table></figure>
<pre><code>1.历史树  分支线 
2.path =》 记录当前commit 变更文件 
3.tree =》 记录当前commit 下文件结构 
</code></pre>
<p>补充： 创建分支同时并切换分支<br>分支： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout</span><br><span class="line"></span><br><span class="line">git checkout [-b|-B|--orphan] &lt;new-branch&gt;] [&lt;start-point&gt;]</span><br><span class="line">eg: </span><br><span class="line">	创建分支同时并切换分支</span><br><span class="line">git checkout -b bigdata 61b6bb8</span><br><span class="line">git branch -v</span><br><span class="line">gitk --all</span><br><span class="line">vim 1.log</span><br><span class="line"> git add 1.log</span><br><span class="line"> git status</span><br><span class="line">  git commit -m &quot;Add 1.log&quot;</span><br><span class="line">   git log --oneline --graph --all</span><br><span class="line">gitk --all</span><br></pre></td></tr></table></figure>


<pre><code>从工作区 =》 本地仓库 ：
     git branch -c java
     git checkout java
     gitk --all
      vim 1.log
      git add -u
       git commit -m &quot;Update 1.log&quot;
       git log --oneline
       vim 1.log
        git status
        git commit -am &quot;Updata 1.log add 3333&quot;  !!!! 

注意：
    git commit -am 
        -a 表示 工作区 暂存区 文件都有的前提下 ，更改工作区文件 可以直接提交到本地仓库 
            但是 新增文件 不可以
</code></pre>
<h1 id="S删除分支"><a href="#S删除分支" class="headerlink" title="S删除分支"></a>S删除分支</h1><pre><code>git branch (-d | -D)  &lt;branchname&gt;…
    -d： 删除分支之前 要求merge 到主分支 
    -D: 强制删除分支 
</code></pre>
<p>merge： 合并分支<br>    git branch -d java<br>error: The branch ‘java’ is not fully merged.<br>If you are sure you want to delete it, run ‘git branch -D java’</p>
<pre><code> git branch -D java
 git branch -v
</code></pre>
<p>.git文件夹 目录介绍:<br>    1.HEAD 文件 当前项目 正在工作的分支是谁<br>        cat HEAD<br>        ref: refs&#x2F;heads&#x2F;master</p>
<pre><code>2.config ： 
    记录项目的一些参数 一些配置信息 

git config --local user.name &quot;zihang&quot;  =》 set 设置参数 
git config --local user.name           =》 get操作

3.refs/ 
    heads/  存储的是分支的指向 哪个commit

        commit hash =》 对应存储的文件内容是什么？
    
        git cat-file 
                    -t  =》 文件类型 =》 git存储文件 有关系 
                    -p  =&gt; 文件内容

    object：是git存储的真正对象 种类有 如下
        commit：
            tree  =》 
                tree =》文件夹
                blob =》 文件
            
        git存储文件高效的原因：
            不同的文件 只要文件内容有相同的部分 就是一个 blob 
        
</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>gittest</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL2</title>
    <url>/2024/10/05/MYSQL2/</url>
    <content><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><span id="more"></span>
<h1 id="查看表中描述"><a href="#查看表中描述" class="headerlink" title="查看表中描述"></a>查看表中描述</h1><pre><code>desc tablename;
</code></pre>
<h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><pre><code>create 建表规范：
    1.表名字 一定是英文 不要写中文  汉语拼音
    2.建表风格
        1.主键 使用表中第一个字段使用自增主键 本身没有任何 业务意义
    3.字段的注释
</code></pre>
<p>业务字段<br>非业务字段:<br>    1.表创建表用户 vs 更新表用户<br>    2.主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user_info2(</span><br><span class="line">	id int(3) not null  auto_increment,</span><br><span class="line">	name varchar(10) COMMENT &#x27;用户名称&#x27;,</span><br><span class="line">	age int(3),</span><br><span class="line">	create_user varchar(10),</span><br><span class="line">	create_time timestamp not null default current_timestamp,</span><br><span class="line">	update_user varchar(10),</span><br><span class="line">	update_time  timestamp not null default current_timestamp on update current_timestamp</span><br><span class="line">	,primary key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [INTO] tbl_name</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br><span class="line">    [ON DUPLICATE KEY UPDATE assignment_list]</span><br><span class="line">insert into user_info (name,age) VALUES(&#x27;zs&#x27;,18),(&#x27;ls&#x27;,20);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into user_info (name,age) VALUES(&#x27;zs01&#x27;,18),(&#x27;ls01&#x27;,20);</span><br></pre></td></tr></table></figure>
<p>NULL: 空值<br>    ‘’ ‘null’ ‘NULL’</p>
<h1 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_reference</span><br><span class="line">    SET assignment_list</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [ORDER BY ...]</span><br><span class="line">    [LIMIT row_count]</span><br><span class="line">where 过滤</span><br><span class="line">update user_info set age=&#x27;20&#x27;; =》 对整张表</span><br><span class="line">update user_info set age=&#x27;20&#x27; where name=&#x27;zs&#x27; ; 对某条数据</span><br><span class="line"></span><br><span class="line">update 语句 注意： where</span><br></pre></td></tr></table></figure>
<h1 id="删除一条数据"><a href="#删除一条数据" class="headerlink" title="删除一条数据"></a>删除一条数据</h1><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name</span><br><span class="line">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [ORDER BY ...]</span><br><span class="line">    [LIMIT row_count]</span><br></pre></td></tr></table></figure>
</code></pre>
<p>delete from user_info where id&#x3D;1;<br>注意：<br>    delete 也要考虑 是否加where</p>
<p>insert into user_info (name,age) VALUES(‘zs’,18),(‘ls’,20);<br>insert into user_info (name,age) VALUES(‘aa’,10),(‘01’,10);<br>insert into user_info (name,age) VALUES(‘bb’,11),(‘02’,20);<br>insert into user_info (name,age) VALUES(‘vv’,12),(‘03’,30);<br>insert into user_info (name,age) VALUES(‘dd’,13),(‘04’,21);</p>
<p>insert into user_info (name,age) VALUES(‘zs’,19),(‘zs’,21);</p>
<h1 id="表的字符集："><a href="#表的字符集：" class="headerlink" title="表的字符集："></a>表的字符集：</h1><pre><code>udf8 
    Incorrect string value: &#39;\xE5\xAD\x90\xE8\x88\xAA...&#39; for column &#39;name
mysql 5.7版本 默认建表字符集 ：latin1
解决：修改字符集 、建表直接指定字符集 utf8
</code></pre>
<h1 id="6-删除表"><a href="#6-删除表" class="headerlink" title="6.删除表"></a>6.删除表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	drop table user_info;</span><br><span class="line"></span><br><span class="line">	CREATE TABLE `user_info` (</span><br><span class="line">  `id` int(3) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(10) DEFAULT NULL,</span><br><span class="line">  `age` int(3) DEFAULT NULL,</span><br><span class="line">  `create_user` varchar(10) DEFAULT NULL,</span><br><span class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `update_user` varchar(10) DEFAULT NULL,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB  DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
<h1 id="7-其他语法"><a href="#7-其他语法" class="headerlink" title="7.其他语法"></a>7.其他语法</h1><p>1.where  过滤条件<br>    1. &gt;<br>    2.&lt;<br>    3. &#x3D;<br>    4. and or in not in<br>mysql&gt; select * from user_info where age &gt; 18;<br>select * from user_info where name&#x3D;’子航01’;<br>mysql&gt; select *  from user_info where name&#x3D;’zs’ and age&gt;18;<br>mysql&gt; select *  from user_info where age&gt;20 or name&#x3D;’zs’;</p>
<p>产品给你 1000个数据值  in<br>select *  from user_info where name&#x3D;’zs’ or name &#x3D; ‘ls’ or name &#x3D;”ww”<br>select *  from user_info where name in (‘zs’,’ls’,’ww’);<br>    not in<br>select *  from user_info where name not in (‘zs’,’ls’,’ww’);</p>
<h1 id="order-by-排序语法"><a href="#order-by-排序语法" class="headerlink" title="order by 排序语法"></a>order by 排序语法</h1><pre><code>mysql&gt; select *  from user_info order by age;

 order by column [asc | desc] ,...

1.默认是升序 
2. asc desc 降序 
</code></pre>
<p>mysql&gt; select *  from user_info order by age ,name desc;</p>
<h1 id="like语法-模糊查询"><a href="#like语法-模糊查询" class="headerlink" title="like语法 模糊查询"></a>like语法 模糊查询</h1><pre><code>1.like  rlike regexp  正则表达式【了解】
    1.% 模糊 
    2.占位符 _
</code></pre>
<p>mysql&gt; select *  from user_info where name like ‘%z%’;<br>mysql&gt; select *  from user_info where name like “_s%”;</p>
<pre><code>insert into user_info (name) VALUES(&#39;zihsssg04&#39;);
insert into user_info (name) VALUES(&#39;zshsssg04&#39;);
insert into user_info (name) VALUES(&#39;zshsssg04&#39;);
insert into user_info (name) VALUES(&#39;zshsssg04&#39;);
</code></pre>
<p>需求：<br>    1.name 字母开头是y<br>select  *  from user_info where name like “y%”;<br>    2.name 字母结尾是1<br>select  *  from user_info where name like “%1”;<br>    3.name 含有字母h<br>select  *  from user_info where name like “%h%”;<br>    4.name查询第3个字母是h的数据<br>select  *  from user_info where name like “__h%”;</p>
<h1 id="合并表"><a href="#合并表" class="headerlink" title="合并表"></a>合并表</h1><pre><code>1.union  去重
2.union all  不去重
</code></pre>
<p>create table a(id int(3),name varchar(4));<br>create table b(id int(3),name varchar(4));</p>
<p>insert into a values(1,’zs’);<br>insert into b values(1,’zs’);<br>insert into b values(2,’ls’);</p>
<p>1.union</p>
<p>select *  from a<br>union<br>select *  from b;</p>
<p>2.union all<br>select *  from a<br>union  all<br>select *  from b;</p>
<h1 id="null"><a href="#null" class="headerlink" title="null"></a>null</h1><pre><code>数据清洗 
    1.过滤null 
        is null 
        is not null 
</code></pre>
<p>select *  from user_info where age is null;</p>
<pre><code>    2.null数据进行 【数据转换】
    update 
</code></pre>
<p>数据分析时候 ：<br>    delte 、update </p>
<p>函数：<br>    处理 null的函数：<br>        1.coalesce()<br>        2.ifnull</p>
<p>select<br>id<br>,name<br>,coalesce(age,0) as age_alias<br>,create_user<br>,create_time<br>,update_user<br>,update_time<br>from user_info</p>
<p>select<br>id<br>,name<br>,ifnull(age,0) as age_alias<br>,create_user<br>,create_time<br>,update_user<br>,update_time<br>from user_info</p>
<h1 id="聚合函数：-指标"><a href="#聚合函数：-指标" class="headerlink" title="聚合函数： 指标"></a>聚合函数： 指标</h1><pre><code>多行数据按照一定规则 进行聚合为一行 
sum max min avg count 
理论上：
    聚合后的行数 &lt;= 聚合前的行数
</code></pre>
<p>insert into user_info (name,age) values(“zs”,10);<br>insert into user_info (name,age) values(“zs”,11);<br>insert into user_info (name,age) values(“zs”,12);<br>insert into user_info (name,age) values(“ls”,10);<br>insert into user_info (name,age) values(“ls”,20);<br>insert into user_info (name,age) values(“ls”,30);<br>insert into user_info (name,age) values(“ww”,30);</p>
<pre><code>1.聚合函数 
select 
sum(age) as age_sum,
max(age) as age_max
,min(age) as age_min
,avg(age) as age_avg
,count(age) as cnt
from user_info

2.分组语法
</code></pre>
<p>词频统计：<br>    wordcount </p>
<pre><code>x 
y
y
z 
</code></pre>
<p>word,1<br>&#x3D;&gt;  对每个单词进行分组  分组<br>    x,&lt;1&gt;<br>    y,&lt;1,1&gt;<br>    z,&lt;1&gt;<br>&#x3D;&gt; 聚合 sum<br>    x,1<br>    y,1+1 &#x3D;2<br>    z,1</p>
<pre><code>group by  column...
</code></pre>
<p>需求：<br>    按照name进行分组，求每组的平均年龄</p>
<p>分组聚合</p>
<p>select<br>name,<br>avg(age) as age_avg<br>from user_info<br>group by name</p>
<pre><code>需求： 
    user_info 各个name的最大年龄、最小年龄、以及人数？
</code></pre>
<p>select<br>name,<br>max(age) as age_max,<br>min(age) as age_min,<br>count(age) as cnt<br>from user_info<br>group by name </p>
<p>分组聚合:注意：<br>    1.select 字段 和  group by 字段 要对应 【非聚合函数字段】</p>
<p>select<br>name,<br>id,<br>max(age) as age_max,<br>min(age) as age_min,<br>count(age) as cnt<br>from user_info<br>group by name ,id</p>
<pre><code>维度不一样： 
    1.
        维度： name 
        指标：最大年龄、最小年龄、以及人数
    2. 
         维度： name、id 
         指标：最大年龄、最小年龄、以及人数
</code></pre>
<p>select<br>name,<br>max(age) as age_max,<br>avg(age) as age_avg,<br>count(age) as cnt<br>from user_info<br>group by name </p>
<p>求：<br>    上面的结果 求： age_avg 大于 18岁的 信息？<br>1.分组聚合 + having<br>select<br>name,<br>max(age) as age_max,<br>avg(age) as age_avg,<br>count(age) as cnt<br>from user_info<br>group by name<br>having age_avg &gt; 18<br>    总结：<br>        条件过滤：<br>            1.where 写在 from 后面<br>            2.having 写在 group by 后面</p>
<pre><code>上面的结果 求： age_avg 大于 18岁的 信息？
</code></pre>
<ol>
<li>子查询：<br> 查询里面 嵌套查询<br>select<br>name,<br>age_max,<br>age_avg,<br>cnt<br>from<br>(<br> select<br> name,<br> max(age) as age_max,<br> avg(age) as age_avg,<br> count(age) as cnt<br> from user_info<br> group by name<br>) as res<br>where<br> age_avg &gt;18;</li>
</ol>
<h1 id="join-多表联查"><a href="#join-多表联查" class="headerlink" title="join 多表联查"></a>join 多表联查</h1><pre><code>种类： 
    4种 广义上
内连接、左连接、右连接、全连接
</code></pre>
<p>内连接 **<br>左连接 **<br>全连接 *</p>
<p>create table a1(id int(3),name varchar(10),address varchar(20));<br>create table b1(id int(3),name varchar(10),age int(3));</p>
<p>insert into a1 values(1,’aa’,”dalian”);<br>insert into a1 values(2,’bb’,”shenyang”);<br>insert into a1 values(4,’dd’,”beijing”);<br>insert into b1 values(1,’aa’,10);<br>insert into b1 values(2,’bb’,20);<br>insert into b1 values(3,’cc’,21);</p>
<pre><code>1.内连接
join 
</code></pre>
<p>select </p>
<p>*<br>from a1 join b1<br>on a1.id &#x3D; b1.id	</p>
<p>select </p>
<p>*<br>from a1 inner join b1<br>on a1.id &#x3D; b1.id	</p>
<pre><code>2.左连接
left join 
    以左表为主 数据是全的 右表来匹配 匹配不上就是null 
</code></pre>
<p>select</p>
<p>*<br>from a1 left join b1<br>on a1.id &#x3D;b1.id;<br>    3.右连接<br>    right join<br>        以右表为主 数据是全的 左表来匹配 匹配不上就是null<br>select</p>
<p>*<br>from a1 right join b1<br>on a1.id &#x3D;b1.id;</p>
<pre><code>4.全连接 -- mysql 不支持全连接
    左表右表数据是全的，而且没有重复数据
full join 
</code></pre>
<p>select</p>
<p>*<br>from a1 left join b1<br>on a1.id &#x3D;b1.id<br>union<br>select</p>
<p>*<br>from a1 right join b1<br>on a1.id &#x3D;b1.id</p>
<h1 id="查询数据条数-显示限制"><a href="#查询数据条数-显示限制" class="headerlink" title="查询数据条数 显示限制"></a>查询数据条数 显示限制</h1><pre><code>limit 
场景： 
    1.显示 避免发生 滚屏效果

    小表 select *  from table ; 几千条数据 

    table： 100M 1PB  1TB
</code></pre>
<p>mysql: 极限 &#x3D;》 TB级别 相应速度 s级别 ms级别【添加索引】<br>    1Tb  select *  from table<br>    dba </p>
]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell</title>
    <url>/2024/10/04/Shell/</url>
    <content><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><span id="more"></span>
<h2 id="1-什么是shell"><a href="#1-什么是shell" class="headerlink" title="1.什么是shell?"></a>1.什么是shell?</h2><pre><code>1.普通的文件
2.linux命令组成
3.编程语言
</code></pre>
<h1 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h1><h2 id="2-1-入门"><a href="#2-1-入门" class="headerlink" title="2.1 入门"></a>2.1 入门</h2><pre><code>1.文件命名 结尾 一般都是以 .sh 结尾
2.文件内容 第一行 #!/bin/bash 

1.编写脚本 
    wordcount  词频统计
    helloworld 

[root@bigdata99 shell]# cat wc.sh 
#!/bin/bash
echo &quot;www.bigdata.com&quot;

2.运行shell脚本
    1.sh xxx.sh
        [root@bigdata99 shell]# sh ./wc.sh 
        www.bigdata.com
    2.给脚本赋予 执行权限 
        chmod 744 ./wc.sh
        [root@bigdata99 shell]# ./wc.sh 
        www.bigdata.com
        [root@bigdata99 shell]# /root/shell/wc.sh
        www.bigdata.com

3.补充： 
    debug 
        1.[root@bigdata99 shell]# cat wc.sh 
            #!/bin/bash -x
            echo &quot;www.bigdata.com&quot;
        2.[root@bigdata99 shell]# sh -x wc.sh 
        + echo www.bigdata.com
        www.bigdata.com
</code></pre>
<h2 id="2-定义变量-与-引用"><a href="#2-定义变量-与-引用" class="headerlink" title="2.定义变量 与 引用"></a>2.定义变量 与 引用</h2><pre><code>1.变量的命名规范： 
    1.命名只能使用英文字母、数字、和下划线、不能以数字开头
    2.中间不能有空格、可以使用下划线
    3.不能使用linux里面的关键字

2.定义变量
    key=value
    注意： 
        1.=前后不能有空格

    1.静态： 
        k=v  k=&quot;v&quot; k=&#39;v&#39;
    2.动态
        k=`v`
引用： 
    $k 
    $&#123;k&#125;

    场景： 
        zs  
            zszhenshuai
</code></pre>
<h2 id="3-传递参数"><a href="#3-传递参数" class="headerlink" title="3.传递参数"></a>3.传递参数</h2><pre><code>脚本内获取脚本外的参数  脚本内定一个参数： 格式 $n
    1.n表示数字
    2.n=1 作为脚本的第一个参数 n=2作为脚本的第2个参数...
    3.n=0 获取脚本的名字
[root@bigdata99 shell]# ./parameter.sh &quot;hello&quot; &quot;zs&quot;
hello
zs
[root@bigdata99 shell]# cat parameter.sh 
echo &quot;文件名：$0&quot;
echo &quot;第一个参数：$1&quot;
echo &quot;第二个参数：$2&quot;
echo &quot;参数的个数：$#&quot;
echo &quot;传递的参数作为一个字符串：$*&quot;  
echo &quot;此脚本运行时的pid：$$&quot;

补充： 
    ps -ef | grep xxx  =&gt; pid 
    kill -9 pid 
</code></pre>
<h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h2><pre><code>语法格式： 
    1.元素 是 空格 进行分割 
    2.arr=(value1 value2 value3 ...)
[root@bigdata99 shell]# cat arr.sh 
arr=(zs lisi ww zl wrm)
echo &quot;所有数组元素：$&#123;arr[*]&#125;&quot; 
echo &quot;第2个元素：$&#123;arr[1]&#125;&quot;
echo &quot;数组元素个数：$&#123;#arr[*]&#125;&quot;
</code></pre>
<h2 id="5-流程控制"><a href="#5-流程控制" class="headerlink" title="5.流程控制"></a>5.流程控制</h2><pre><code>分支、循环 

1.if else 语法
    语法结构： 
    if condition;then
        command
    else 
        command
    fi

2.condition 条件判断 
    [ 表达式 ]
    1.值判断
        true false

        = 等于
        ==等于
        &lt;= &gt;= &gt; &lt; !=
        -eq 等于
        -ne 不等于
        -lt 小于
        -gt 大于 
        -le 小于等于
        -ge 大于等于

补充： 
    1.[] 前后要有空格 
    2.关系表达式 前后要有空格 
linux 获取上一个命令是否执行成功： 
    $? 
        成功 0  true
        不成功 非0 false

    2.权限判断:
        -r 
        -w 
        -x
    3.文件类型判断
        -d 
        -f 
        -e 
</code></pre>
<p>[root@bigdata99 shell]# cat if.sh<br>a&#x3D;”zs”<br>b&#x3D;”zs”<br>if [ ${a} &#x3D;&#x3D; ${b} ];then<br>    echo “&#x3D;&#x3D;”<br>else<br>    echo “!&#x3D;”<br>fi</p>
<pre><code>2.if elseif 语法
语法结构： 
    if condition;then
        command
    elif condition;then
        command
    else 
        command
    fi

    补充： &amp;&amp; ||
</code></pre>
<p>[root@bigdata99 shell]# cat ifelse.sh </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#统计期末成绩 优良差  </span><br><span class="line">#&gt;=<span class="number">90</span> 优  &gt;=<span class="number">60</span> 良  &lt;<span class="number">60</span> 差</span><br><span class="line"></span><br><span class="line">score=$<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> [ $&#123;score&#125; -ge <span class="number">90</span> ];then</span><br><span class="line">	echo <span class="string">&quot;优&quot;</span></span><br><span class="line">elif [ $&#123;score&#125; -ge <span class="number">60</span> ];then</span><br><span class="line">	echo <span class="string">&quot;良&quot;</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	echo <span class="string">&quot;差&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">	循环： </span><br><span class="line">		<span class="keyword">for</span>、<span class="keyword">while</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>: </span><br><span class="line">		语法结构 </span><br><span class="line">		<span class="keyword">for</span> x in item1 item2 item3 ... itemN</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">			command1</span><br><span class="line">			...</span><br><span class="line">		done</span><br><span class="line">	[root<span class="meta">@bigdata99</span> shell]# cat <span class="keyword">for</span>.sh </span><br><span class="line">	<span class="keyword">for</span> x in <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">	<span class="keyword">do</span> </span><br><span class="line">		echo $&#123;x&#125;</span><br><span class="line">	done</span><br></pre></td></tr></table></figure>
<pre><code>2. fori 
    打印 10以内的数字
    [root@bigdata99 shell]# cat fori.sh 
    for((i=0;i&lt;10;i++))
    do
        echo &quot;value is $&#123;i&#125;&quot;
    done

3.while
    语法结构： 
        while condition
        do 
            todo....
        done
    案例： 
        打印 10以内的数字
    
    [root@bigdata99 shell]# cat while.sh 
# 打印 10以内的数字

i=1
while ((i&lt;=10))
do
    echo $&#123;i&#125;
    let i++
done
</code></pre>
<p>场景：<br>    有一个字符串”zhangsan,lisi,zhaoliu”</p>
<pre><code>如何分割字符串？ 
    java  split（&quot;,&quot;） =》 array =》for
    linux  把, =》 空格    =》 array


    1.字符串替换： 
        str//,/ 
            =&gt;zhangsan,lisi,zhaoliu
            =&gt;zhangsan lisi zhaoliu
    [root@bigdata99 shell]# cat split.sh 
        str=&quot;zhangsan,lisi,zhaoliu&quot;
        arr=($&#123;str//,/ &#125;)
        for var in $&#123;arr[*]&#125;
        do
            echo $var
        done
    2.IFS变量进行字符串分割【了解】
</code></pre>
<h2 id="6-shell里面常用的分析工具"><a href="#6-shell里面常用的分析工具" class="headerlink" title="6.shell里面常用的分析工具"></a>6.shell里面常用的分析工具</h2><h2 id="1-awk-文本分析"><a href="#1-awk-文本分析" class="headerlink" title="1.awk 文本分析"></a>1.awk 文本分析</h2><h3 id="1-获取列数据"><a href="#1-获取列数据" class="headerlink" title="1.获取列数据"></a>1.获取列数据</h3><pre><code>        [root@bigdata99 ~]# cat test.log 
        a b c
        1 2 3
        [root@bigdata99 ~]# cat test.log | awk &#39;&#123;print $1&#125;&#39;
        a
        1
        [root@bigdata99 ~]# cat test.log | awk &#39;&#123;print $2&#125;&#39;
        b
        2
        [root@bigdata99 ~]# cat test.log | awk &#39;&#123;print $1,$2&#125;&#39;
        a b
        1 2
</code></pre>
<h3 id="2-获取行数据"><a href="#2-获取行数据" class="headerlink" title="2.获取行数据"></a>2.获取行数据</h3><pre><code>        [root@bigdata99 ~]# cat test.log | awk &#39;NR==1&#123;print&#125;&#39;
</code></pre>
<h2 id="2-sed"><a href="#2-sed" class="headerlink" title="2.sed"></a>2.sed</h2><pre><code>    文本替换
</code></pre>
<h3 id="1-文本中a-替换成d-每行第一次遇到a-替换成d-【不常用】"><a href="#1-文本中a-替换成d-每行第一次遇到a-替换成d-【不常用】" class="headerlink" title="1.文本中a 替换成d 每行第一次遇到a 替换成d  【不常用】"></a>1.文本中a 替换成d 每行第一次遇到a 替换成d  【不常用】</h3><pre><code>        sed -i  &#39;s/a/d/&#39;    test.log
</code></pre>
<h3 id="2-全文替换"><a href="#2-全文替换" class="headerlink" title="2.全文替换"></a>2.全文替换</h3><pre><code>        sed -i &#39;s/a/d/g&#39; test.log
    
    补充： 
        [root@bigdata99 ~]# cat path.log 
        p1=/data/log
        p2=/data/spark

    需求： 
        p2 值路径 替换成 /root 

        sed -i &#39;s//data/spark//root/g&#39;  path.log  错误的
        转义： \
        sed -i &#39;s/\/data\/spark/\/root/g&#39;  path.log

        [root@bigdata99 ~]# cat path.log 
        p1=/data/log
        p2=/root

        sed -i &#39;s#/root#/data/spark#g&#39; path.log
</code></pre>
<h1 id="1-机器克隆"><a href="#1-机器克隆" class="headerlink" title="1.机器克隆"></a>1.机器克隆</h1><h2 id="1-准备模板机"><a href="#1-准备模板机" class="headerlink" title="1.准备模板机"></a>1.准备模板机</h2><h2 id="2-网络配置-ip-静态ip"><a href="#2-网络配置-ip-静态ip" class="headerlink" title="2.网络配置  &#x3D;&gt; ip 静态ip"></a>2.网络配置  &#x3D;&gt; ip 静态ip</h2><pre><code>    网卡： 
        vim /etc/sysconfig/network-scripts/ifcfg-ens33
            BOOTPROTO=&quot;static&quot; 
            ONBOOT=&quot;yes&quot;
            IPADDR=192.168.41.11
            GATEWAY=192.168.41.2
            DNS1=192.168.41.2
</code></pre>
<h2 id="3-机器自带没用的东西-去除掉"><a href="#3-机器自带没用的东西-去除掉" class="headerlink" title="3.机器自带没用的东西 去除掉"></a>3.机器自带没用的东西 去除掉</h2><pre><code>        1.jdk卸载掉：
            rpm -qa | grep java
                xxx 
                xx
                x
            卸载： 
            rpm -e xxx --nodeps
            rpm -e xx --nodeps
            rpm -e x --nodeps
        2.hostname
            vim /etc/hostname
            bigdata11
        3.内网ip 与hostname 映射
            vim /etc/hosts

            192.168.41.11 bigdata11
            192.168.41.12 bigdata12
            192.168.41.13 bigdata13
            192.168.41.14 bigdata14
            192.168.41.15 bigdata15
            192.168.41.16 bigdata16
</code></pre>
<h2 id="4-防火墙关闭：打开所有端口"><a href="#4-防火墙关闭：打开所有端口" class="headerlink" title="4.防火墙关闭：打开所有端口"></a>4.防火墙关闭：打开所有端口</h2><pre><code>            systemctl status firewalld
            systemctl stop firewalld
            systemctl disable firewalld
</code></pre>
<h1 id="2-vmware-虚拟网络"><a href="#2-vmware-虚拟网络" class="headerlink" title="2.vmware 虚拟网络"></a>2.vmware 虚拟网络</h1><h2 id="1-关闭虚拟机"><a href="#1-关闭虚拟机" class="headerlink" title="1.关闭虚拟机"></a>1.关闭虚拟机</h2><h2 id="2-虚拟网络："><a href="#2-虚拟网络：" class="headerlink" title="2.虚拟网络："></a>2.虚拟网络：</h2><pre><code>        编辑=》虚拟网络=》vm8=》
            子网ip：192.168.41.0
            子网掩码：255.255.255.0
            nat设置：192.168.41.2
</code></pre>
<h2 id="3-开机："><a href="#3-开机：" class="headerlink" title="3.开机："></a>3.开机：</h2><pre><code>        验证内网ip ： ifconfig
            192.168.41.11 bigdata11
</code></pre>
<h2 id="4-远程登录"><a href="#4-远程登录" class="headerlink" title="4.远程登录"></a>4.远程登录</h2><pre><code>        xshell ： 
            ip 
            用户名
            密码
            port
</code></pre>
<h1 id="2-克隆机器"><a href="#2-克隆机器" class="headerlink" title="2.克隆机器"></a>2.克隆机器</h1><pre><code>    注意： 
        创建完整克隆
</code></pre>
<h2 id="1-修改克隆机器的内网ip"><a href="#1-修改克隆机器的内网ip" class="headerlink" title="1.修改克隆机器的内网ip"></a>1.修改克隆机器的内网ip</h2><pre><code>        vim /etc/sysconfig/network-scripts/ifcfg-ens33
</code></pre>
<h2 id="2-hostname"><a href="#2-hostname" class="headerlink" title="2.hostname"></a>2.hostname</h2><pre><code>        vim /etc/hostname
</code></pre>
<h2 id="3-重启机器"><a href="#3-重启机器" class="headerlink" title="3.重启机器"></a>3.重启机器</h2>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2024/10/04/MySQL/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><span id="more"></span>
<h1 id="使用场景？"><a href="#使用场景？" class="headerlink" title="使用场景？"></a>使用场景？</h1><pre><code>1.java开发人员 业务数据库
2.大数据组件 元数据 、结果数据 
</code></pre>
<h1 id="2-什么是mysql？"><a href="#2-什么是mysql？" class="headerlink" title="2.什么是mysql？"></a>2.什么是mysql？</h1><pre><code>1.关系型数据库： RDBMS  非关系型数据库NoSQL
    1.存储数据
    2.查询
2.类似表格
3.有行有列
</code></pre>
<h1 id="3-背景："><a href="#3-背景：" class="headerlink" title="3.背景："></a>3.背景：</h1><pre><code>处理数据 ：excel 
mysql： 
    存储数据，数据分析
    一堆类似excel的表格
</code></pre>
<h1 id="4-官网"><a href="#4-官网" class="headerlink" title="4.官网"></a>4.官网</h1><pre><code>www.mysql.com
</code></pre>
<h1 id="5-版本："><a href="#5-版本：" class="headerlink" title="5.版本："></a>5.版本：</h1><pre><code>8.x 不是主流、java团队 
5.7  it java 大数据 主流
5.6 目前公司也有
</code></pre>
<p>补充：<br>    上传下载：<br>        [root@bigdata31 software]# yum install -y lrzsz</p>
<pre><code>上传： rz 
下载 ：sz xxx
</code></pre>
<h1 id="6-部署："><a href="#6-部署：" class="headerlink" title="6.部署："></a>6.部署：</h1><pre><code>1.下载安装包  
    5.7
    安装包种类：
        rpm包 ：mysql source code =》 rpm包
            mysql-5.7.38-1.el7.x86_64.rpm-bundle.tar

        tar包：mysql source code +开发加的mysql代码 =》 编译打包生成 tar包

            mysql-5.7.38-el7-x86_64.tar.gz

准备好了： 
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="number">2.</span>安装部署</span><br><span class="line">		<span class="number">1.</span>上传mysql 安装包</span><br><span class="line">			[root<span class="meta">@bigdata31</span> software]# ll</span><br><span class="line">			total <span class="number">595272</span></span><br><span class="line">			-rw-r--r--. <span class="number">1</span> root root <span class="number">609556480</span> Aug <span class="number">26</span>  <span class="number">2021</span> mysql-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm-bundle.tar</span><br><span class="line">			[root<span class="meta">@bigdata31</span> software]# pwd</span><br><span class="line">			/root/software</span><br><span class="line"></span><br><span class="line">		<span class="number">2.</span>部署 </span><br><span class="line">			<span class="number">1.</span>解压</span><br><span class="line">			[root<span class="meta">@bigdata31</span> software]# tar -xvf ./mysql-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm-bundle.tar </span><br><span class="line">mysql-community-embedded-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-compat-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-devel-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-compat-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-test-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-common-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-devel-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-client-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-server-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<pre><code>2.安装 
    1.卸载 mariadb 相关的东西
    [root@bigdata31 software]# rpm -qa | grep mariadb
</code></pre>
<p>mariadb-libs-5.5.56-2.el7.x86_64<br>        [root@bigdata31 software]# rpm -e –nodeps mariadb-libs-5.5.56-2.el7.x86_64<br>[root@bigdata31 software]# rpm -qa | grep mariadb</p>
<pre><code>rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm 
注意： 
    package mariadb-libs conflicts with 
</code></pre>
<p>rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-compat-5.7.28-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm</p>
<pre><code>3.有一个 配置文件 管控mysql 
    /etc/my.cnf

    mysql运行日志文件：log-error=/var/log/mysqld.log
4.初始化mysql 
        mysqld --initialize --user=mysql
    
     A temporary password is generated for root@localhost: rfnYYHj0jc,R

5.启动mysql 
    systemctl start mysqld 
    mysql 可以对外提供服务：
        port： 3306
6.登录mysql 使用
    mysql -uroot -prfnYYHj0jc,R

7.修改mysql 软件 root用户 密码
    set password = password(&#39;123456&#39;);
8.赋予权限 
    flush privileges;

补充： 
    卸载： 
        1.mysql 停掉 
            systemctl stop mysqld 
        2.mysql卸载 
            rpm -qa | grep mysql
            rpm -qa | grep mysql | xargs -n1 rpm -e --nodeps 
        3.linux存储目录删掉 
            find / -name &quot;*mysql*&quot; 
            注意：/sys/
        4.重装
    
    mysql 全部卸载重装


    shift + alt =&gt;多行编辑
    alt + tab 
    rm -rf xx 
</code></pre>
<p>mysql 数据库：<br>       excel 表格<br>       win：<br>       	 文件夹：<br>            一堆表格</p>
<p>MySQL:<br>    数据库：&#x3D;》文件夹 database<br>        一堆表格 table</p>
<p>远程登录工具：<br>    navcat 【选择】<br>    sqlyog<br>    dbvear工具 【选择】</p>
<pre><code>root@localhost: 123456
    只允许 当前机器登录
root@%: 123456
</code></pre>
<p>远程登录访问：<br>    1.修改 mysql 登录 运行用户的ip &#x3D;》 任意ip </p>
<p>mysql语法：【了解】<br>    1.查看数据库<br>        show databases;<br>    2.切换数据库<br>        use mysql;<br>    3.查看库下面有哪些表<br>        show tables;<br>    4.查看表中数据<br>    select host,user<br>    from user;<br>    5.修改表中数据<br>    update mysql.user set  host&#x3D;”%” where user&#x3D;”root”;<br>    6.刷新权限<br>    flush privileges; </p>
<p>基本语法：<br>    1.sql进行开发<br>        sql类型：<br>            ddl 数据定义语言 ：create drop  alter<br>            dml 数据操作语言 : insert select update delete<br>            dcl 数据控制语言 :grant [了解]<br>2.查看数据库<br>    SHOW {DATABASES | SCHEMAS}<br>    [LIKE ‘pattern’ | WHERE expr]</p>
<p>{} 必选参数 | 可选<br>[] 可选<br>    SHOW DATABASES;</p>
<p>mysql&gt; SHOW DATABASES;<br>+——————–+<br>| Database           |<br>+——————–+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+——————–+<br>4 rows in set (0.00 sec)</p>
<p>3.切换数据库<br>    use dbname;</p>
<p>4.查看数据库下面的表<br>    SHOW [FULL] TABLES<br>    [{FROM | IN} db_name]<br>    [LIKE ‘pattern’ | WHERE expr]<br>    SHOW TABLES;</p>
<p>mysql&gt; show tables FROM sys;</p>
<p>5.创建数据库<br>    CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name<br>    [create_option] …</p>
<p>create_option: [DEFAULT] {<br>    CHARACTER SET [&#x3D;] charset_name<br>  | COLLATE [&#x3D;] collation_name<br>}</p>
<p>CREATE DATABASE bigdata;</p>
<p>6.创建表<br>    excel ： </p>
<pre><code>字段：column : 
        1.名称
        2.字段类型
</code></pre>
<p>常用字段类型：<br>    数值类型：<br>        整数：<br>            int 整型<br>            long 长整型<br>        小数：<br>            float 单精度<br>            double 双精度<br>            decimal 小数 &#x3D;》 跟钱挂钩的<br>    字符串：<br>        char 字节  长度 0-255  bigdataxxxxxxx 255<br>        varchar 字符串 长度范围<br>    日期：<br>        date  日期： YYYY-MM-DD<br>        time 时间 ： HH:mm:SS<br>        datetime 年月日时分秒 ： YYYY-MM-DD HH:mm:SS<br>        timestamp 年月日时分秒【时间戳】:YYYY-MM-DD HH:mm:SS</p>
<p>列的名字、字段的名字<br>mysql&gt; CREATE TABLE user_table(<br>    -&gt; id int(3),<br>    -&gt; name varchar(10),<br>    -&gt; age int(3)<br>    -&gt; );<br>Query OK, 0 rows affected (0.01 sec)</p>
<p>mysql&gt; show tables;<br>+——————-+<br>| Tables_in_bigdata |<br>+——————-+<br>| user_table        |<br>+——————-+<br>1 row in set (0.00 sec)</p>
<p>7.表中插入数据 </p>
<p>INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]<br>    [INTO] tbl_name<br>    [(col_name [, col_name] …)]<br>    {VALUES | VALUE} (value_list) [, (value_list)] …<br>    [ON DUPLICATE KEY UPDATE assignment_list]</p>
<p>INSERT into user_table (id,name,age)VALUES (1,’zhangsan’,10);</p>
<p>8.查看数据</p>
<ul>
<li>表示所有字段</li>
</ul>
<p>select *<br>from user_table;</p>
<p>select name,age from user_table;</p>
]]></content>
      <categories>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>git3</title>
    <url>/2024/10/06/git3/</url>
    <content><![CDATA[<h1 id="git3"><a href="#git3" class="headerlink" title="git3"></a>git3</h1><span id="more"></span>
<h1 id="如何修改commit的msg-信息"><a href="#如何修改commit的msg-信息" class="headerlink" title="如何修改commit的msg 信息"></a>如何修改commit的msg 信息</h1><pre><code>1.修改最新的commit的msg
    git commit --amend

2.修改之前某一个的commit的msg
    git rebase   -- 变基
    git rebase -i &lt;after-this-commit&gt; ： 
            -i 表示交互式
    修改之前某一个的commit = 基于前一个commit 进行修改当前的commit 
</code></pre>
<p>p, pick <commit> &#x3D; use commit  &#x3D;》 选择某个commit<br>r, reword <commit> &#x3D; use commit, but edit the commit message 重写某个commit msg<br>s, squash <commit> &#x3D; use commit, but meld into previous commit 合并多个commit msg</p>
<pre><code>3.合并多个commit的msg 合并成一个commit msg
    git rebase -i &lt;after-this-commit&gt; 
</code></pre>
<h1 id="工作区-vs-暂存区-vs-本地仓库"><a href="#工作区-vs-暂存区-vs-本地仓库" class="headerlink" title="工作区 vs 暂存区 vs 本地仓库"></a>工作区 vs 暂存区 vs 本地仓库</h1><pre><code>1.查看文件差异 
git status  =&gt; 文件的个数 名字

2.查看文件内容差异 
    所有文件内容差异：
        1.比较 不同工作区 
 git diff 	工作区 vs 暂存区 文件内容差异
 git diff --cached  暂存区 vs 本地仓库 文件内容差异
 		2.比较不同的commit 之间差异
         git diff 9cbef63 0aece3e
         git diff HEAD 0aece3e
         git diff HEAD HEAD~1
         git diff HEAD HEAD~2

         git diff HEAD HEAD~2 -- 2.log 1.log

         git diff a分支 b分支

3.恢复操作 
    工作区 vs 暂存区 vs 本地仓库 
    1.工作区 =》 暂存区 
        1.git add 
            可以进行撤回
            git restore --staged &lt;file&gt;...
            git restore --staged 1.log 2.log 3.log
        2.工作区：git add 之前 
            编写代码 也可以撤回
            git restore &lt;file&gt;...
            git restore 3.log

    2.暂存区 vs 本地仓库 可以撤回
        git commit 之前： 
        git reset --hard HEAD  =&gt;回退版本
</code></pre>
<h1 id="删除文件-文件重命名"><a href="#删除文件-文件重命名" class="headerlink" title="删除文件 文件重命名"></a>删除文件 文件重命名</h1><pre><code>git ： 建议 
    相关命令 进行操作
1.删除/重命名文件 
    git rm/mv 
     git commit -m &quot;Rm 11.log&quot;

2.补充： 【了解】
    rm: git rm 
        rm -rf xxx 
        git add xxx 
        git commit -m &quot;Rm xxx&quot;

    mv : git mv 
</code></pre>
<h1 id="紧急任务"><a href="#紧急任务" class="headerlink" title="紧急任务"></a>紧急任务</h1><p> 开发代码 &#x3D;》 线上bug &#x3D;》commit<br>            &#x3D;》开发代码 存起来 &#x3D;》恢复出来 进行开发</p>
<pre><code>git stash 

1.开发代码
$ vim 2.log

2.突然线上bug +解决bug
git stash
commit 

3.恢复 解决bug之前的开发代码
git stash list
git stash apply  补充 ： --index &lt;stash 下标&gt;
</code></pre>
<h1 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h1><pre><code>通过这个文件 可以指定 哪些文件 不需要被git管控
-- java 
    =》 xxx.java  =&gt; xxx.class
    =&gt; .idea 文件里面的文件 也是不需要被管控

eg： 
    *.class  =》以.class文件结尾的 不需要被 git管控 
    log/
    
</code></pre>
<h1 id="仓库备份：克隆"><a href="#仓库备份：克隆" class="headerlink" title="仓库备份：克隆"></a>仓库备份：克隆</h1><pre><code>git clone： 
    git clone  &lt;repository&gt; [&lt;directory&gt;]

    repository： 仓库
        本地仓库： path
        远程仓库：url 

1.本地仓库 备份到 本地 【不会用的】
git clone /e/test/music/.git music_blk


2.远程仓库 备份到 本地 【常用的】
    远程仓库： 
        本地项目
        代码托管平台：github、gitlab、gitee

    git clone http://192.168.41.110/dl2262/dl2262.git
</code></pre>
<h1 id="本地仓库-与-远程仓库-交互"><a href="#本地仓库-与-远程仓库-交互" class="headerlink" title="本地仓库 与 远程仓库 交互"></a>本地仓库 与 远程仓库 交互</h1><pre><code>1.本地仓库 连接到 远程仓库
git remote: 
    git remote add &lt;name&gt; &lt;URL&gt;

    1.连接远程仓库： 
    git remote add gitlab http://192.168.41.110/dl2262/test01.git
    2.检查远程仓库的连接 
        git remote -v
    
    3.本地仓库 push 远程仓库 
        git push  ==&gt; 更新远程仓库的分支

        git push [--all ] =&gt; 本地所有分支 更新到远程仓库 分支
        git push [&lt;repository&gt; [&lt;refspec&gt;…​]]
                    =》更新 可以选择 哪个远程仓库 哪个分支


        eg： 
            git push --all 
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push --all</span><br><span class="line"></span><br><span class="line"> * [new branch]      dev -&gt; dev   =》 本地dev =》 远程 自动给远程 dev 分支</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first) </span><br><span class="line">error: failed to push some refs to &#x27;http://192.168.41.110/dl2262/test01.git&#x27;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure>
<p>解决：<br>    先拉下来：<br>        git fetch &#x2F; git pull :<br>            git fetch  [<repository> [<refspec>…​]] &#x3D;》可以指定拉取哪个仓库哪个分支<br>            git fetch –all  &#x3D;&gt; 拉取远程仓库 所有分支</p>
<pre><code>    git fetch gitlab master  =&gt;默认先把远程 分支拉下来 但是文件没有和 本地分支 进行合并 
    git merge 远程分支： 
        ：
    git merge gitlab/master
        fatal: refusing to merge unrelated histories

    git merge --allow-unrelated-histories gitlab/master    
    git push gitlab master
</code></pre>
<p>场景：<br>    1.多人协同开发 常用操作</p>
<pre><code>    1.多人共同维护同一个分支 操作不同的文件 【不会有代码冲突问题】
        1.远程仓库创建一个分支 
            bigdata 
        2.准备两个 本地仓库 
        git clone http://192.168.41.110/dl2262/test01.git test01_blk

        3.zhangsan 开发项目 提交到 远程仓库 
        4.lisi开发项目 提交到 远程仓库
            1.git fetch 
            2.git merge 
            3.git push 

        注意： 
            1.拉取远程仓库代码 =》 本地仓库 和 远程仓库保持一致

            git pull  &lt;=&gt; git fetch  + git merge

    1.注意： 只有一种场景会有冲突：

        1.多人共同维护同一个分支 操作相同的文件 不同位置 =》 不会有冲突

            1.zhangsan 
                vim README.md
                 git add ./README.md
                 git commit -m &quot;Update Readme zhangsan&quot;
                 git branch -av
                  git remote -v
                   git push gitlab bigdata

            2.lisi 
                vim README.md
                 git commit -am &quot;Update Readme lisi&quot;
                 git branch -av
                git remote -v
                 git push origin bigdata
                To http://192.168.41.110/dl2262/test01.git
                ! [rejected]        bigdata -&gt; bigdata (fetch first)

                git fetch origin bigdata =&gt;更新本地仓库 
                 git merge origin/bigdata 
                     Auto-merging README.md
                    CONFLICT (content): Merge conflict in README.md

                    git add README.md
                    git commit -m &quot;Resolved conflict by hand&quot;
                    git branch -av
                    git remote -v
                    git push origin  bigdata

        多人共同维护同一个分支 操作相同的文件 的内容相同位置 
            git pull 

    
    2.如何切换远程仓库  版本
        1.本地切换 
            git log  --oneline
            git reset --hard fd1e890
            git branch -av
        2.强制push 
            git push -f gitlab bigdata

            远程仓库有要求：
                保护分支的机制
</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>java面试题</title>
    <url>/2024/10/09/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="java面试题"><a href="#java面试题" class="headerlink" title="java面试题"></a>java面试题</h1><span id="more"></span>
<h2 id="我们通常所说的E-Learning，它的全称是什么？"><a href="#我们通常所说的E-Learning，它的全称是什么？" class="headerlink" title="我们通常所说的E-Learning，它的全称是什么？"></a>我们通常所说的E-Learning，它的全称是什么？</h2><p>继承Thread，实现Runnable接口</p>
<h2 id="java中标识符的命名规则是什么？"><a href="#java中标识符的命名规则是什么？" class="headerlink" title="java中标识符的命名规则是什么？"></a>java中标识符的命名规则是什么？</h2><p>由字母，数字，下划线_,美元符号$<br>不能数字开头<br>区分大小写<br>不能是java中关键字和保留字</p>
<h2 id="Java-语言中的数据类型转换有哪两种？"><a href="#Java-语言中的数据类型转换有哪两种？" class="headerlink" title="Java 语言中的数据类型转换有哪两种？"></a>Java 语言中的数据类型转换有哪两种？</h2><p>自动类型转换：编译器自动完成类型转换，不需要在程序中编写代码。<br>强制类型转换：强制编译器进行类型转换，必须在程序中编写代码。</p>
<h2 id="在java-之中-break和continue的区别"><a href="#在java-之中-break和continue的区别" class="headerlink" title="在java 之中 break和continue的区别"></a>在java 之中 break和continue的区别</h2><p>在java之中，break和continue都可以用来跳出当前循环，但是两者的主要区别是：<br>当循环执行到break语句时，就退出整个循环，然后执行循环外的语句。<br>当循环语句执行到continue时，当次循环结束，重新开始下一轮循环。如果已经是最后一轮循环了，那么这是的continue就与break效果一样了</p>
<h2 id="for-while-do-while三种循环有什么特点和区别？"><a href="#for-while-do-while三种循环有什么特点和区别？" class="headerlink" title="for while do-while三种循环有什么特点和区别？"></a>for while do-while三种循环有什么特点和区别？</h2><p>这三种都是循环语句，其中，for和while语句基本上是一样的，也可以互相替换。但从使用经验上来说，for循环通常用在有固定循环次数的循环语句中，而while语句则用在满足某种条件时才循环的语句中，它们都是先判断条件是否满足再执行语句，所以，如果一开始条件就不满足，循环语句有可能一次也不执行。do-while语句和while基本相同，所不同的是，它先执行循环语句，再判断条件是否满足，也就是说，循环语句至少能执行一次。</p>
<h2 id="类和对象的关系？"><a href="#类和对象的关系？" class="headerlink" title="类和对象的关系？"></a>类和对象的关系？</h2><p>类是模板，是具有相同属性和行为的对象的集合，对象是类的实例</p>
<h2 id="StringBuffered、StringBuilder和String的区别。"><a href="#StringBuffered、StringBuilder和String的区别。" class="headerlink" title="StringBuffered、StringBuilder和String的区别。"></a>StringBuffered、StringBuilder和String的区别。</h2><p> String(JDK1.0)：不可变字符序列，底层使用char[]存储<br>​ StringBuffer(JDK1.0)：可变字符序列、效率低、线程安全，底层使用char[]存储<br>​ StringBuilder(JDK 5.0)：&#x3D;&#x3D;可变字符序列、效率高、线程不安全&#x3D;&#x3D;，底层使用char[]存储</p>
<h2 id="请列举5个常见的异常，并写出其中文意思"><a href="#请列举5个常见的异常，并写出其中文意思" class="headerlink" title="请列举5个常见的异常，并写出其中文意思"></a>请列举5个常见的异常，并写出其中文意思</h2><p>1、ArithmeticExecption  算术异常类<br>2、NullPointerException 空指针异常类<br>3、ClassCastException  类型强制转换异常<br>4、FileNotFoundException 文件未找到异常<br>5、NumberFormatException 字符串转换为数字异常<br>6、IOException   输入输出异常</p>
<h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>泛型只在编译过程有效，成功编译过后的 class 文件中是不包含任何泛型信息的<br>看下面的例子：返回结果为 true，原因在于编译时 Box<String> 和 Box<Integer> 的类型都被擦除了<br>，编译后只有 Box 类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Box&lt;String&gt; b1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;String&gt;(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">Box&lt;Integer&gt; b2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;Integer&gt;(<span class="number">2</span>);</span><br><span class="line">System.out.println(b1.getClass() == b2.getClass());</span><br></pre></td></tr></table></figure>
<h2 id="数组和集合的区别"><a href="#数组和集合的区别" class="headerlink" title="数组和集合的区别"></a>数组和集合的区别</h2><p>数组：长度是不可改变的，可以存放任意类型的数据。<br>集合：大小是可变的，只能存引用类型的数据。</p>
<h2 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h2><p>Collection(接口)，存储的是单一对象。<br>Map(接口)，存储的是 key-value(键值对)形式的数据。</p>
<p>Iterator(迭代器)，主要用于遍历 Colleciton<br>Collecitons(工具类)，Colleciton 集合的工具类<br>Comparator&#x2F;Comparable(比较器)， 用于对象之间的比较排序</p>
<h2 id="error和exception有什么区别？"><a href="#error和exception有什么区别？" class="headerlink" title="error和exception有什么区别？"></a>error和exception有什么区别？</h2><p>Error：通常表示严重的系统级错误，这些错误通常是不可恢复的，程序无法通过常规的异常处理机制来处理。例如，OutOfMemoryError 和 StackOverflowError 都是典型的 Error。这些错误通常会导致程序终止或需要虚拟机进行处理。<br>Exception：表示程序在正常运行过程中遇到的可预料的意外情况，这些情况可能并且应该被捕获和处理。Exception 包括受检查异常（Checked Exception）和非受检查异常（Unchecked Exception）。受检查异常需要在代码中显式地处理，而非受检查异常通常是运行时异常（Runtime Exception），如 NullPointerException 和 ArrayIndexOutOfBoundsException。</p>
<h2 id="和eqals的区别"><a href="#和eqals的区别" class="headerlink" title="&#x3D;&#x3D;和eqals的区别"></a>&#x3D;&#x3D;和eqals的区别</h2><h3 id="1-基本数据类型与引用类型的区别："><a href="#1-基本数据类型与引用类型的区别：" class="headerlink" title="1.基本数据类型与引用类型的区别："></a>1.基本数据类型与引用类型的区别：</h3><p>对于基本数据类型（如 int, double, char 等），&#x3D;&#x3D; 比较的是它们的值是否相等。例如，int a &#x3D; 5; int b &#x3D; 5;，a &#x3D;&#x3D; b 会返回 true，因为它们的值相同。<br>对于引用类型（如 String, Integer 等），&#x3D;&#x3D; 比较的是两个对象的引用是否指向内存中的同一个对象，即比较的是对象的内存地址。例如，String str1 &#x3D; new String(“hello”); String str2 &#x3D; new String(“hello”);，str1 &#x3D;&#x3D; str2 会返回 false，因为它们指向不同的对象。</p>
<h3 id="2-equals-方法："><a href="#2-equals-方法：" class="headerlink" title="2.equals() 方法："></a>2.equals() 方法：</h3><p>equals() 方法默认情况下是比较两个对象的引用是否相同，但许多类（如 String, Integer 等）重写了 equals() 方法，使其比较对象的内容是否相同。例如，String str1 &#x3D; “hello”; String str2 &#x3D; “hello”;，str1.equals(str2) 会返回 true，因为它们的内容相同。<br>equals() 方法不能用于基本数据类型的比较，只能用于引用数据类型的比较。</p>
<h3 id="3-Object-类中的-equals-方法："><a href="#3-Object-类中的-equals-方法：" class="headerlink" title="3.Object 类中的 equals() 方法："></a>3.Object 类中的 equals() 方法：</h3><p>equals() 方法是 Object 类的一个方法，默认实现是比较两个对象的引用是否相同。如果需要比较对象的内容，通常需要重写 equals() 方法。</p>
<h3 id="4-使用场景："><a href="#4-使用场景：" class="headerlink" title="4.使用场景："></a>4.使用场景：</h3><p>当需要比较基本数据类型的值时，使用 &#x3D;&#x3D;。<br>当需要比较对象的内容时，使用 equals() 方法。<br>当需要比较对象的引用时，使用 &#x3D;&#x3D;。</p>
<h2 id="用于比较基本数据类型的值或对象的引用，而-equals-方法用于比较对象的内容。理解这两者的区别对于编写正确的Java代码至关重要。"><a href="#用于比较基本数据类型的值或对象的引用，而-equals-方法用于比较对象的内容。理解这两者的区别对于编写正确的Java代码至关重要。" class="headerlink" title="&#x3D;&#x3D; 用于比较基本数据类型的值或对象的引用，而 equals() 方法用于比较对象的内容。理解这两者的区别对于编写正确的Java代码至关重要。"></a>&#x3D;&#x3D; 用于比较基本数据类型的值或对象的引用，而 equals() 方法用于比较对象的内容。理解这两者的区别对于编写正确的Java代码至关重要。</h2>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java面试</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2024/10/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><span id="more"></span>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="进程-Process"><a href="#进程-Process" class="headerlink" title="进程(Process)"></a>进程(Process)</h3><p>每个独立执行的程序称为进程<br>在操作系统中进程是进行系统资源分配、调度和管理的最小单位<br>进程在执行过程中拥有独立的内存单元。</p>
<h3 id="线程-Thread"><a href="#线程-Thread" class="headerlink" title="线程(Thread)"></a>线程(Thread)</h3><p>线程是一个程序内部的一条执行路径，进程内部单一的一个顺序控制流。<br>Java 虚拟机允许应用程序并发地运行多个执行路径，称为多线程。<br>进程中不同的线程共享内存单元。<br>操作系统是以进程为单位的，而进程是以线程为单位的，进程中必须有一个主线程 main</p>
<h2 id="线程的创建与启动（三种方式）"><a href="#线程的创建与启动（三种方式）" class="headerlink" title="线程的创建与启动（三种方式）"></a>线程的创建与启动（三种方式）</h2><h3 id="方式-1：继承-Thread"><a href="#方式-1：继承-Thread" class="headerlink" title="方式 1：继承 Thread"></a>方式 1：继承 Thread</h3><p>创建线程类： 继承 Thread 类，重写 run 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scl.java.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 写线程的业务逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是子线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用 start()方法启动线程，会自动触发 run 方法</span><br><span class="line"><span class="type">CustomThread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">th.start();</span><br></pre></td></tr></table></figure>

<h3 id="方式-2：实现-Runnable-接口"><a href="#方式-2：实现-Runnable-接口" class="headerlink" title="方式 2：实现 Runnable 接口"></a>方式 2：实现 Runnable 接口</h3><p>创建 Runnable 接口实现类，重写 run 方法。Ruannable 的本质是线程中执行的任务<br>实现步骤：</p>
<ol>
<li>实现Runnable 接口，重写run()方法。<br>Runnable是线程Thread执行的任务。</li>
<li>创建线程<br>Thread th &#x3D; new Thread(Runnable r);</li>
<li>启动<br>th.start();<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scl.java.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.scl.java.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">CountRunnable</span>());</span><br><span class="line">        th.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="方式-3：实现-Callable-接口"><a href="#方式-3：实现-Callable-接口" class="headerlink" title="方式 3：实现 Callable 接口"></a>方式 3：实现 Callable<T> 接口</h3><p>创建 Callable 接口实现类，重新 call()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scl.java.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SumCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scl.java.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建任务FutureTask</span></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">SumCallable</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        th.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得线程的执行结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程的基本方法"><a href="#线程的基本方法" class="headerlink" title="线程的基本方法"></a>线程的基本方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Thread <span class="title function_">currentThread</span><span class="params">()</span> 返回对当前正在执行的线程对象的引用</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> 设置线程名称</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span> 返回该线程的名称</span><br></pre></td></tr></table></figure>
<h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>五种状态，即创建、就绪、运行、阻塞、终止。</p>
<ol>
<li><p>概念：进程和线程</p>
</li>
<li><p>*** 线程的三种创建方式</p>
</li>
<li><p>线程的常用方法</p>
</li>
<li><p>*** 线程的生命周期</p>
</li>
<li><p>*** 线程的调度</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2024/10/03/Linux/</url>
    <content><![CDATA[<h1 id="Linux概述："><a href="#Linux概述：" class="headerlink" title="Linux概述："></a>Linux概述：</h1><span id="more"></span>
<pre><code>1.操作系统
2.linux 
3.版本：
    Ubuntu 、 centos、debian、redhat。。。

    win： 大版本 
    小版本 

    centos ： 
        6.x  
        7.x  主流
        8.x
</code></pre>
<h1 id="2-为什么要使用Linux？"><a href="#2-为什么要使用Linux？" class="headerlink" title="2.为什么要使用Linux？"></a>2.为什么要使用Linux？</h1><pre><code>1.生产上： 
    大数据组件基于linux 进行开发部署
2.java 算法 
</code></pre>
<h1 id="3-部署linux系统"><a href="#3-部署linux系统" class="headerlink" title="3.部署linux系统"></a>3.部署linux系统</h1><pre><code>1.win： 
    1.虚拟机 要求： 
        1.你的winwow 配置 内存 8G 
        2. 伤window 磁盘 

    2.云主机 ： 
        1.云厂商 ： 
            阿里云、腾讯云、华为云、京东云
            1.3个月 69
            2.按需分配 
</code></pre>
<h1 id="4-虚机机-部署linux系统："><a href="#4-虚机机-部署linux系统：" class="headerlink" title="4.虚机机 部署linux系统："></a>4.虚机机 部署linux系统：</h1><pre><code>win： 
    1.虚拟化的软件 ： 
        vmware 、vbox。。。
            1.linux镜像 

1.安装 vmware 
    1.注册码 =》文档里有
    2.win 不支持vmware安装 ： 
        1.bios 没有打开

2.打开vmware 
    1.关联linux镜像   =》 linux部署 
</code></pre>
<p>linux部署：<br>    1.稍后安装<br>    2. 机器的名字+路径：机器存储路径 + 存储路径<br>    3.资源：<br>        1.cpu ： 2core<br>        2.mem：4g 、2g<br>        3.df 40G<br>    4.关联linux镜像 </p>
<p>linux启动： 4g 40G<br>    centos 7.5 ：简单配置<br>        1.语言：<br>            中文<br>        2.软件：<br>             软件选择：带桌面安装</p>
<pre><code>    3.系统配置：
        1.kdump 关闭 =》 保护机制 
        2.网络： 
            1.网卡打开
            2.hostname
        3.磁盘划分 ： 
            1.boot =》 存放linux启动的资源 1g 
                file system =》 ext4
            2.swap: 2g
                把磁盘资源 当做 内存来使用 
            3./ 根目录 ： 
                linux全部存储空间 磁盘大小
                file system =》 ext4
</code></pre>
<p>linux系统：<br>    1.用户：<br>        root  最高权限用户 </p>
<p>远程登录访问：<br>    1.win&#x2F;mac:<br>        1.安装xshell<br>            远程登录工具：<br>                xshell、crt、finlshell 【百度搜想要的远程工具推荐】</p>
<pre><code>    2.远程登录 ： -- 打开xshell
        1.机器的ip ：192.168.10.22  【ifconfig 查看自己的ip 】
        2.用户名 root
        3.密码 123456
        4.端口 22
</code></pre>
<p>linux系统：<br>    1.层级式文件存储系统<br>        根目录 &#x2F;</p>
<p>linux命令<br>[root@bigdata22 ~]#<br>    root 默认的管理员 最大权限用户<br>    bigdata22 机器的名字<br>    ~  当前用户的 家目录 </p>
<p>1.pwd 查看当前光标所在的目录<br>[root@bigdata22 ~]# pwd<br>&#x2F;root</p>
<p>2.ls 查看光标所在的目录下面<br>    ls  显示 文件夹和文件<br>    ls -l 显示额外的信息【权限、用户用户组 大小 时间】<br>    ls -l -a 显示以.开头的文件和文件夹<br>            以.开头的文件和文件夹 隐藏文件<br>    ls -l -h 查看文件的大小</p>
<pre><code>命令帮助：
    命令 --help 

ls --help
用法：ls [选项]... [文件]...

[] 可选
... 多个

ls -l =&gt; ll 等价 别名

需求： 
    一个目录下面 有1000多个文件 查找 最新更改的文件 ？ 

ll -r -t  =&gt; ll -rt
</code></pre>
<p>3.mkdir 创建文件夹<br>    [root@bigdata22 ~]# mkdir bigdata<br>    1.并级<br>        [root@bigdata22 ~]# mkdir dir1 dir2 dir3<br>    2.串级<br>        [root@bigdata22 ~]# mkdir -p dir4&#x2F;dir5&#x2F;dir6</p>
<p>4.cd 切换目录、路径、文件夹<br>    [root@bigdata22 ~]# cd bigdata&#x2F;<br>        &#x2F;</p>
<pre><code>    路径： 
        绝对路径：光标从 根目录开始的 
            cd /root/dir2
        相对路径：光标从 当前开始
            cd ./dir2/

cd ../ 退回到上一层级目录
cd ../../

../ 
./ 当前目录

~ 当前用户的 家目录
    root 家目录 /root 
    其他用户
    xx  家目录 /home/xx

如何快速回到家目录？
    1. cd /root 
    2. cd 回车  ==&gt;推荐
    3. cd ~

cd - 回到上一次操作的目录
</code></pre>
<p>5.创建文件<br>    常用：<br>        1.touch 1.log<br>        2.vi&#x2F;vim 2.log<br>    不常用：<br>        echo “bigdata” &gt; 3.log<br>echo “bigdata” 打印</p>
<blockquote>
<p>创建或者覆盖一个文件</p>
<blockquote>
<p>追加</p>
</blockquote>
</blockquote>
<p>6.编辑文件 vi&#x2F;vim<br>    三种模式：<br>        1.命令行模式<br>        2.编辑模式<br>        3.尾行模式</p>
<pre><code>vim xx.log =&gt; 命令行模式 
按键盘 i键  =》 编辑模式
按键盘 esc键 编辑模式 =》命令行模式
按键盘 shift+; =&gt; : 键 命令行模式 =》尾行模式  输入 wq 保存退出

尾行模式： 
    w 保存
    q 退出
    ! 强制
</code></pre>
<p>7.查看文件<br>    cat  查看文件所有内容 输出到控制台<br>    more 文件内容 一页一页的 按空格 往下翻 q退出<br>    less 文件内容 一页一页的 按上下键 q退出</p>
<pre><code>    看小文件： 
        cat 
    看大文件 vim
        more less

实时查看文件新产生的内容 
    tail ： 
        -f 1.log
        -F  = -f +retry
    
    ctrl +c /  ctrl +z  中断命令

场景： 
    log： 
        日志级别 info、warn、 error
    如何定位 error信息？ 
        1.vim xxx.log  搜索 error词 ： 
            尾行模式：输入 /要找的词 
                键盘 n 查找下一个词 
                    N 找上一个词
            
            日志文件 1G 100w个 
        2.cat 
            cat vmware-vmsvc.log | grep error  &gt; error.log 
            定位 error 上下文
            cat vmware-vmsvc.log | grep -A 3 error &gt; error.log =》 error 后10行
            cat vmware-vmsvc.log | grep -B 3 error &gt; error.log =》 error 前10行
            cat vmware-vmsvc.log | grep -C 3 error &gt; ~/error.log =》 error 前后各10行
</code></pre>
<p>| 管道符 &#x3D;》上一个命令的结果 作为下一个命令的输入<br>grep 过滤 文本所在的一行</p>
<p>8.文件上传下载<br>    上传：win &#x3D;》 linux<br>    下载： linux &#x3D;》 win </p>
<pre><code>1.xshell工具 xftp
2.linux命令
    yum install -y lrzsz 
</code></pre>
<p>9.自动补全<br>    tab ：<br>        按一次  匹配的东西 就一个 自动补全<br>        按两次 把匹配东西全部匹配出来<br>10.清屏 ：<br>    clear<br>    ctrl +l</p>
<p>11.查看历史命令<br>    history<br>        1.快速执行</p>
<ol start="12">
<li><p>mv 移动  cp 复制</p>
<p>mv [选项]… 源文件… 目录<br>mv dir1 bigdata<br>cp [选项]… 源文件… 目录<br>cp  -r dir2 bigdata<br>mv 始终是一份  快<br>cp 两份		 慢</p>
<p>改名字：</p>
</li>
</ol>
<p>13.rm 删除文件或者文件夹 【高危命令】<br>    rm [选项]… 文件…<br>        有删除提示：<br>            删除文件：<br>                rm error.log<br>            删除文件夹：<br>                [root@bigdata22 ~]# rm -r dir3_blk<br>        强制删除：没有提示<br>            [root@bigdata22 ~]# rm -f 2.log<br>            [root@bigdata22 ~]# rm -r -f dir2_blk</p>
<pre><code>    rm -r -f xxx =&gt; rm -rf  xxx 

rm -rf / =&gt; 删库跑路  root 权限限制
</code></pre>
<p>14.别名 alias</p>
<pre><code>1.创建别名 
    alias aa=&quot;cd /tmp&quot;  =&gt; 仅仅是当前会话生效 

    [root@bigdata22 ~]# aa
    bash: aa: 未找到命令...
    是因为没有在 环境变量文件里面 进行配置 
</code></pre>
<p>15.环境变量：<br>    jdk &#x3D;》 path<br>    环境变量路径：[root@bigdata22 ~]# echo $PATH<br>        &#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin</p>
<pre><code>1.全局环境变量 
    /etc/profile  所有用户都可以使用

2.个人环境变量	 只能当前用户使用 其他用户 不能使用
        ~/.bashrc 【建议】
        ~/.bash_profile

3.生效环境变量 
    1.source /etc/profile
    2.重新打开一个会话

    个人：
        alias cc=&quot;cd /tmp&quot;
</code></pre>
<p>1.用户管理命令<br>    linux 用户：<br>        用户<br>        用户组</p>
<pre><code>yizi： 
    hr、财务


1.查看用户相关的命令 
[root@bigdata22 ~]# ll /usr/sbin/user*
-rwxr-x---. 1 root root 118192 11月  6 2016 /usr/sbin/useradd
-rwxr-x---. 1 root root  80360 11月  6 2016 /usr/sbin/userdel
-rwxr-x---. 1 root root 113840 11月  6 2016 /usr/sbin/usermod
2.	查看用户组相关的命令
    [root@bigdata22 ~]# ll /usr/sbin/group*
-rwxr-x---. 1 root root 65480 11月  6 2016 /usr/sbin/groupadd
-rwxr-x---. 1 root root 57016 11月  6 2016 /usr/sbin/groupdel
-rwxr-x---. 1 root root 57064 11月  6 2016 /usr/sbin/groupmems
-rwxr-x---. 1 root root 76424 11月  6 2016 /usr/sbin/groupmod

3.创建用户
[root@bigdata22 ~]# useradd uzi
</code></pre>
<p>[root@bigdata22 ~]# id uzi<br>uid&#x3D;1005(uzi) gid&#x3D;1006(uzi) 组&#x3D;1006(uzi)、</p>
<pre><code>创建一个普通用户 uzi  用户名称 uzi
也会创建一个 uzi 用户组
会把主组 设置成 uzi 
同时 也会创建一个家目录： /home/uzi

用户的信息 /etc/passwd
用户组的信息 /etc/group

4.切换用户 
    su uzi
    su - uzi 切换用户的同时 也会获得 该用户的环境变量以及执行 【推荐】

5.
    场景： 
        [root@bigdata22 ~]# useradd uzi
</code></pre>
<p>useradd：警告：此主目录已经存在。<br>不从 skel 目录里向其中复制任何文件。 &#x3D;》 提供样式 以及环境变量的文件<br>正在创建信箱文件: 文件已存在</p>
<p>[root@bigdata22 ~]# ll -a &#x2F;etc&#x2F;skel&#x2F;<br>总用量 32<br>drwxr-xr-x.   3 root root  4096 4月  11 2018 .<br>drwxr-xr-x. 135 root root 12288 11月  1 09:51 ..<br>-rw-r–r–.   1 root root    18 4月  11 2018 .bash_logout<br>-rw-r–r–.   1 root root   193 4月  11 2018 .bash_profile<br>-rw-r–r–.   1 root root   231 4月  11 2018 .bashrc<br>drwxr-xr-x.   4 root root  4096 4月  12 2022 .mozilla</p>
<p>用户样式丢失的问题？<br>    1.[root@bigdata22 uzi]# cp &#x2F;etc&#x2F;skel&#x2F;.* .&#x2F;</p>
<p>添加用户组： [root@bigdata22 ~]# groupadd bigdata</p>
<p>场景 ：<br>    uzi ： uzi<br>    1.uzi 用户 额外追加一个bigdata组？<br>    [root@bigdata22 ~]# usermod  -a -G bigdata    uzi</p>
<pre><code>2.修改主组 并添加附属组
[root@bigdata22 ~]# usermod  -a -G bigdata    uzi
[root@bigdata22 ~]# id uzi
uid=1005(uzi) gid=1006(uzi) 组=1006(uzi),1003(bigdata)
[root@bigdata22 ~]# usermod -g bigdata  uzi
[root@bigdata22 ~]# id uzi
uid=1005(uzi) gid=1003(bigdata) 组=1003(bigdata)
[root@bigdata22 ~]# usermod  -a -G uzi    uzi
[root@bigdata22 ~]# id uzi
uid=1005(uzi) gid=1003(bigdata) 组=1003(bigdata),1006(uzi)
</code></pre>
<p>2.设置用户密码<br>    passwd :<br>        1.修改当前用户的密码<br>        [root@bigdata22 ~]# passwd<br>        更改用户 root 的密码 。<br>        新的 密码：<br>        无效的密码： 密码少于 8 个字符<br>        重新输入新的 密码：<br>        passwd：所有的身份验证令牌已经成功更新。</p>
<pre><code>    2.修改其他用户密码
        [root@bigdata22 ~]# passwd uzi
        更改用户 uzi 的密码 。
        新的 密码：
        无效的密码： 密码少于 8 个字符
        重新输入新的 密码：
        passwd：所有的身份验证令牌已经成功更新。
</code></pre>
<p>3.sudo 普通用户 临时具有 使用root的最大权限 </p>
<pre><code>1.vim /etc/sudoers
    uzi ALL=(root)  NOPASSWD: ALL

2.[uzi@bigdata22 root]$ sudo ls
1.log  bigdata	dir3  dir4
</code></pre>
<p>场景：<br>    su 和 sudo 能不能一起使用？ 使用的场景是什么？<br>    能<br>    1.sudo ：切换用户<br>    2.root sudo</p>
<p>4.&#x2F;etc&#x2F;passwd<br>    1.&#x2F;sbin&#x2F;nologin  有提示<br>    2.&#x2F;usr&#x2F;bin&#x2F;false 没有提示 </p>
<pre><code>CDH平台：hadoop、hive、yarn、hdfs、flume、hue
su - yarn 
/sbin/nologin /usr/bin/false =&gt; /bin/bash
</code></pre>
<p>5.文件权限相关命令<br>    [root@bigdata22 ~]# ll<br>总用量 16<br>-rw-r–r–. 1 root root    4 10月 31 14:52 1.log<br>第一个字母： d 文件夹 - 文件 l 连接<br>后面9个字母 三个为一组 ：<br>rw- r– r–</p>
<p>r: read  读的权限 4<br>w：write 写的权限 2<br>x：执行权限       1<br>-：没权限         0</p>
<p>第一组：rw- 4+2+0&#x3D;6 代表文件或者文件夹的所属用户的 权限<br>第二组：r– 4+0+0&#x3D;4 代表文件或者文件夹的所属用户组的权限<br>第三组：r– 4+0+0&#x3D;4 代表文件或者文件夹的其他用户组的权限</p>
<p>rw-r–r– 644</p>
<p>7：4 2 1<br>6：4 2 0<br>5：4   1</p>
<p>-rwxr-xr-x  root root bigdata<br>    uzi </p>
<p>关于权限修改命令：<br>    chmod     修改文件或者文件夹的权限：<br>        chmod 640 1.log  &#x3D;》 文件<br>        chmod -R 640 &#x2F;bigdata &#x3D;&gt; 文件夹 </p>
<pre><code>chown  修改文件或者文件夹的用户和用户组
    chown [选项]... [所有者][:[组]] 文件...

    chown  uzi:uzi 1.log  =&gt; 文件 
    chown -R uzi:uzi /bigdata =&gt; 文件夹 
</code></pre>
<p>权限相关的场景？<br>    – </p>
<p>6.大小<br>    文件：ll -h  、 du -sh<br>    文件夹： du -sh</p>
<p>7.搜索文件<br>    find<br>    locate 【不用它】</p>
<p>find [-H] [-L] [-P]<br> [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path…] [expression]</p>
<p> find [path…] [expression]</p>
<pre><code>    expression： -name &quot;xxx&quot;
</code></pre>
<p>find &#x2F; -name “1.log”</p>
<p>8.vi、vim命令<br>    1.编辑文件<br>        尾行模式 wq 保存退出 正常<br>                            不正常</p>
<pre><code>ctrl +c ctrl + z 
    解决： 
        1.删除交换文件 .2.log.swp

2.error 定位信息
    log 1w多行 

    行号： 
        尾行模式 ：set nu 
        取消行号：set nonu

3.常用快捷方式 
    dd 删除当前行
    dG删除当前行 以及 以下所有行
    ndd 删除当前行 以及 以下n行

    u 撤回

    gg 跳转到第一行的第一个字母
    G 跳转到最后一个的第一个字母
    shift +$ 跳转到 行尾
    shift +^ 跳转到 行头

    i o
场景： 
    清空这个文件内容 ？ 
     gg =&gt; dG 

    清空文件内容？
        1.gg =&gt; dG	
        2.linux =》 空的文件 
            cat /dev/null &gt; 3.log	 

        echo &quot;&quot; &gt; 3.log
    
场景： 
    shell 脚本 数据文件清空的操作 根据文件字节大小判断是否清空完成
    往文件里面写入数据

    if filesize &gt; 0 then 
        不操作
    else 
        log写入数据
</code></pre>
<p>9.系统相关命令<br>    内存：free<br>        [root@bigdata22 ~]# free -h<br>    磁盘：df<br>        [root@bigdata22 ~]# df -h<br>文件系统                 容量  已用  可用 已用% 挂载点<br>&#x2F;dev&#x2F;mapper&#x2F;centos-root   56G   23G   31G   42% &#x2F;</p>
<p>添加磁盘：<br>&#x2F;dev&#x2F;vdb1   10T   23G   31G   42% &#x2F;data01<br>&#x2F;dev&#x2F;vdb2   10T   23G   31G   42% &#x2F;data02<br>&#x2F;dev&#x2F;vdb3   10T   23G   31G   42% &#x2F;data03<br>&#x2F;dev&#x2F;vdb4   10T   23G   31G   42% &#x2F;data04</p>
<pre><code>负载：top
    top - 14:20:11 up  5:28,
    2 users
    load average: 0.00, 0.01, 0.05  
                5min  10min 15min
                经验值： 
                    超过10 说明你的机器 卡卡的 
                        20
                        99=》datax 同步任务 cpu
                        重启 =》
                            1.检查硬件是否有问题 
</code></pre>
<p>10.yum &#x2F; rpm </p>
<pre><code>linux centos 软件 

yum search  xxx   -- 需要联网 
yum install xxx   -- 需要联网
</code></pre>
<p>11.通讯命令<br>    ping ip<br>    telnet ip port</p>
<pre><code>1.ip =》hostname 
 172.10.100.1  &lt;=&gt; baidu01
2.端口： 
    1-65535  =》 防火墙决定的 

a =&gt; b : 
    1.ping b_ip 网络ok 可以进行通讯的
    2.a 访问b机器某个 服务的 端口 
        telnet b_ip port 
                     9527
</code></pre>
<p>a：<br>    win<br>    ping ip  &#x3D;》 检查网络是否通畅<br>b：<br>    linux 内网ip：192.168.10.22</p>
<pre><code>22 ssh 远程登录并执行
    连不上原因： 
        1.80 没有开放 
        2.80 没有服务

    win开启telnet功能： 
        1.控制面板=》程序=》打开或关闭wins功能=》telnet客户端选中
</code></pre>
<p>补充：<br>    1.工作中 安全问题<br>        ping ip 【不允许ping】<br>        telnet ip port</p>
<pre><code>2.linux telnet ： 
    yum install -y telnet
</code></pre>
<p>12.补充命令 -》 查看linux 系统命令、某个软件shell脚本 [命令] 是否存在<br>    which<br>        which ls<br>    whereis</p>
<pre><code>1.[root@bigdata22 ~]# banzhang
    bash: banzhang: 未找到命令...
        1.命令确实没有安装
        2.安装了 没有配置环境变量

2.whereis banzhang
</code></pre>
<p>13.修改机器名字<br>    去公司 0-1 搭建服务器：<br>    hostname<br>    hostnamectl  set-hostname bigdata99</p>
<p>14.解压缩<br>    zip<br>    gz &#x3D;&gt; gzip</p>
<p>zip:<br>    压缩：<br>        zip log.zip 1.log 2.log 3.log<br>    解压：<br>        unzip<br>        unzip  file[.zip]  [-d exdir]<br>            eg:<br>                unzip .&#x2F;log.zip<br>                unzip .&#x2F;log.zip -d .&#x2F;dir1<br>gzip:<br>    文件<br>    归档文件 tar</p>
<p>文件：1.log 2.log 3.log<br>归档文件: test.tar<br>    tar :<br>        归档：<br>            tar -cf test.tar 1.log 2.log 3.log<br>        解归档：<br>            test.tar<br>            tar -xf test.tar -C .&#x2F;dir2</p>
<p>归档文件 做一个压缩：gzip<br>    test.tar &#x3D;》 test.tar.gz<br>        压缩：<br>            tar -zcvf test2.tar.gz 1.log 2.log 3.log<br>        解压：<br>            tar -zxvf .&#x2F;test.tar.gz -C .&#x2F;dir3</p>
<p>15.yum<br>    yum search xxx<br>    yum install -y xxx</p>
<pre><code>httpd

centos 6:
    service httpd start|status|restart|stop

centos 7:
    service httpd start|status|restart|stop  兼容
    systemctl start|status|restart|stop  name...

启动： 
    systemctl start httpd  
进程： 
    ps -ef |  grep httpd

杀死进程： 
    kill -9 pid
    kill -9 $(pgrep -f httpd)
    补充： 
浏览器： http://ip:80
        https://ip:443

查端口： 
    netstat -nlp | grep httpd

:::80 =&gt; ip:80 web   
ip:80
0.0.0.0:80 
    外部机器可以访问 
    
    外部机器不可以访问
127.0.0.1:80  自己可以访问
localhost:80

curl localhost:80

补充： 
  kill -9 $(pgrep -f httpd)
</code></pre>
<p>app &#x3D;》pid<br>    思考：每个进程都会有 对外提供服务的端口么？<br>        不一定 </p>
<pre><code>场景： 
    大数据平台 webui 老板 找一下webui? port 忘记了 ？ 

    启动=》 进程名字 =》 ps -ef | grep name =&gt;pid 
    netstat -nlp | grep pid =&gt; port 
    ip:port
    
</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2024/10/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>java api</title>
    <url>/2024/10/02/java-api/</url>
    <content><![CDATA[<h1 id="java-api"><a href="#java-api" class="headerlink" title="java api"></a>java api</h1><span id="more"></span>
<h1 id="参数设置的优先级："><a href="#参数设置的优先级：" class="headerlink" title="参数设置的优先级："></a>参数设置的优先级：</h1><pre><code>1.默认配置文件
    core-default.xml
    hdfs-default.xml
    mapred-default.xml
    yarn-default.xml
2.生产配置文件
    core-site.xml
    hdfs-site.xml
    mapred-site.xml
    yarn-site.xml
3.代码里面设置的参数
     Configuration

优先级排序：代码里面设置的参数 》 生产配置文件 》 默认配置文件
</code></pre>
<h1 id="1-使用java-api-操作-hdfs在-创建文件夹"><a href="#1-使用java-api-操作-hdfs在-创建文件夹" class="headerlink" title="1.使用java api 操作 hdfs在 创建文件夹"></a>1.使用java api 操作 hdfs在 创建文件夹</h1><pre><code> /data/dt=20221114
 /data/dt=20221115
 /data/dt=20221116
</code></pre>
<h1 id="2-使用java-api-上传本地-wc-data-到上面三个目录下"><a href="#2-使用java-api-上传本地-wc-data-到上面三个目录下" class="headerlink" title="2.使用java api 上传本地 wc.data 到上面三个目录下"></a>2.使用java api 上传本地 wc.data 到上面三个目录下</h1><h1 id="3-使用java-api-将"><a href="#3-使用java-api-将" class="headerlink" title="3.使用java api 将"></a>3.使用java api 将</h1><pre><code>/data/dt=20221114/wc.data
/data/dt=20221115/wc.data
/data/dt=20221116/wc.data
目录下的文件移动到 指定目录 并进行改名字
/data/hive/20221114-01.data
/data/hive/20221115-01.data
/data/hive/20221116-01.data
</code></pre>
<h1 id="创建文件夹-上传-改名字"><a href="#创建文件夹-上传-改名字" class="headerlink" title="创建文件夹  上传 改名字"></a>创建文件夹  上传 改名字</h1><p> path:<br>    hdfspath  上传的path<br>    localpath  本地path<br>    filename   文件名字<br>    renamepath  修改文件的路径的path<br>    renamesufname 修改后文件的结尾<br>    dt         </p>
<p>hadoop jar &#x2F;home&#x2F;hadoop&#x2F;project&#x2F;DL2262-hdfsapi-1.0.jar <br>com.bigdata.HomeWork01 <br>“&#x2F;data&#x2F;dt&#x3D;” “file:&#x2F;&#x2F;&#x2F;&#x2F;home&#x2F;hadoop” “1.log” “&#x2F;data&#x2F;flink” “-01.data” “20221117”</p>
<p>start.sh<br>if [ $# -lt 6 ];then<br>    echo “Usage:put file to hdfs”<br>    echo “Usage:$0 <hdfspath> <localpath> <filename> <renamepath> <suffname> <dt>“<br>    echo “Usage:<hdfspath> is hdfs path”<br>    echo “eg:$0 ‘&#x2F;data&#x2F;dt&#x3D;’ ‘file:&#x2F;&#x2F;&#x2F;&#x2F;home&#x2F;hadoop’ ‘1.log’ ‘&#x2F;data&#x2F;flink’ ‘-01.data’ ‘20221117’”<br>    exit;<br>fi</p>
<p>hadoop jar &#x2F;home&#x2F;hadoop&#x2F;project&#x2F;DL2262-hdfsapi-1.0.jar <br>com.bigdata.HomeWork01 <br>“${1}” “${2}” “${3}” “${4}” “${5}” “${6}”</p>
<h1 id="HDFS：负责存储数据"><a href="#HDFS：负责存储数据" class="headerlink" title="HDFS：负责存储数据"></a>HDFS：负责存储数据</h1><pre><code>1.文件进行拆分 文件块
2.存储 拆分 文件块
</code></pre>
<h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><pre><code>hdfs主要存储文件 大文件  不是说 不能存储小文件
存储小文件 影响hdfs 性能
</code></pre>
<h1 id="block-块-："><a href="#block-块-：" class="headerlink" title="block 块 ："></a>block 块 ：</h1><pre><code>1.怎么来的？
    文件拆分来的 【按照 块大小 进行拆分】
2.属性：
    1.块大小 128M blocksize
    2.块的副本数:
        1.伪分布式 1
        2.完全分布式 3
            1.3  3
            2.&gt;3 3

本地文件大小：260M
块大小 ：128m

      块实际存储      规格【块大小】 128M
</code></pre>
<p> 第一块	   128M				128M<br> 第二块	   128M				128M<br> 第三块		4M				128M</p>
<h1 id="S假如："><a href="#S假如：" class="headerlink" title="S假如："></a>S假如：</h1><pre><code>一缸水 260L
一个瓶子 128l
</code></pre>
<p>第一个瓶子  128l   128L<br>第二个瓶子  128l<br>第三个瓶子  4L</p>
<p>160M 2个副本 问：<br>    1.文件拆分了块在hdfs上存了多少个块？<br>160M：<br>128M  &#x3D;&gt; 1<br>32M   &#x3D;&gt; 1<br>1+1 &#x3D;2 块  * 2 &#x3D; 4个块</p>
<pre><code>2.实际存储到hdfs 存储的大小是多少？
    160m * 2 = 320M
</code></pre>
<p>[hadoop@bigdata32 subdir0]$ pwd<br>&#x2F;home&#x2F;hadoop&#x2F;data&#x2F;hadoop&#x2F;dfs&#x2F;data&#x2F;current&#x2F;BP-155707757-192.168.41.32-1668441906801&#x2F;current&#x2F;finalized&#x2F;subdir0&#x2F;subdir0</p>
<p>练习：<br>    hdfs api 完成wordcount 统计</p>
<p>大数据处理：<br>    1.input<br>    2.处理<br>    3.output</p>
<pre><code>hdfs 存储一堆文件 让你统计每个单词出现的次数？
1.input
    hdfs 一些文件
    fs.open
2.处理
    词频统计
    1.读取进来的内容 一行一行的 ，按照某个规则指定分隔符 进行拆分 =》一个一个单词
    2.给每个单词 赋值为1
        a,a,a,b,b
     =&gt;
     	(a,1)
        (a,1)
        (a,1)
        (b,1)
        (b,1)
    3.将相同的单词 存起来 一个集合里面
        进行聚合统计 每个单词出现的次数
        &lt;a,1,1,1&gt;
        &lt;b,1,1&gt;
        =&gt;
        &lt;a,3&gt;
        &lt;b,2&gt;
3.output
    1.打印到控制台
    2.输出到hdfs上
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>变量和运算</title>
    <url>/2024/10/08/%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="变量和运算"><a href="#变量和运算" class="headerlink" title="变量和运算"></a>变量和运算</h1><span id="more"></span>
<h2 id="1-变量和常量"><a href="#1-变量和常量" class="headerlink" title="1. 变量和常量"></a>1. 变量和常量</h2><h3 id="1-1-内存和硬盘"><a href="#1-1-内存和硬盘" class="headerlink" title="1.1 内存和硬盘"></a>1.1 内存和硬盘</h3><ul>
<li><strong>硬盘</strong>：以文件的形式永久存储数据的。</li>
<li><strong>内存</strong>：用于临时存放在CPU中的运算数据。</li>
</ul>
<h3 id="1-2-变量概述"><a href="#1-2-变量概述" class="headerlink" title="1.2 变量概述"></a>1.2 变量概述</h3><p>变量是通过内存来临时保存数据的。变量的信息包括：</p>
<ul>
<li><strong>变量名</strong>（数据名）</li>
<li><strong>变量值</strong>（数据值）</li>
</ul>
<h3 id="1-3-变量的声明和赋值"><a href="#1-3-变量的声明和赋值" class="headerlink" title="1.3 变量的声明和赋值"></a>1.3 变量的声明和赋值</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul>
<li>声明变量：<code>数据类型 变量名;</code></li>
<li>命名方式：变量名采用小驼峰式命名，如<code>bookName</code></li>
<li>赋值：<code>变量名 = 值;</code></li>
</ul>
<p>当类型相同且同类作用的变量可以一起声明和赋值。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量保存年龄</span></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">// 给年龄赋值</span></span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明和赋值一次完成</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个变量类型相同可以同时声明</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>, height = <span class="number">175</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4 常量"></a>1.4 常量</h3><p>固定的值或者不能改变值的变量，称为常量。</p>
<h4 id="常量命名方式"><a href="#常量命名方式" class="headerlink" title="常量命名方式"></a>常量命名方式</h4><p>全部大写，不同单词间使用下划线分割。</p>
<h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h2><h3 id="2-1-标识符概念"><a href="#2-1-标识符概念" class="headerlink" title="2.1 标识符概念"></a>2.1 标识符概念</h3><p>Java对包、类、方法、参数和变量等要素命名时使用的字符序列称为标识符。简单理解，标识符就是程序员自己起的名字。</p>
<h3 id="2-2-命名规则"><a href="#2-2-命名规则" class="headerlink" title="2.2 命名规则"></a>2.2 命名规则</h3><p>（注：此部分原文未给出具体命名规则，通常命名规则包括：</p>
<ul>
<li>只能包含字母、数字、下划线（_）和美元符号（$）。</li>
<li>不能以数字开头。</li>
<li>不能是Java的关键字或保留字。</li>
<li>最好能够反映其代表的实体或数据的意义。）</li>
</ul>
<h3 id="2-3-关键字和保留字"><a href="#2-3-关键字和保留字" class="headerlink" title="2.3 关键字和保留字"></a>2.3 关键字和保留字</h3><p>Java语言中有一些被预先定义并赋予特殊意义的单词，称为关键字（Keywords）或保留字（Reserved Words）。这些词在Java程序中有特殊的用途，不能用作标识符。例如：<code>int</code>、<code>class</code>、<code>return</code>等。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.4 命名规约</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 变量声明与初始化示例</span><br><span class="line">  <span class="code">```java</span></span><br><span class="line"><span class="code">  int width, height; // 1</span></span><br><span class="line"><span class="code">  int width = 20, height; // 2 注意：height 未初始化</span></span><br><span class="line"><span class="code">  // 错误示例: int width = 20，height = 30; // 3 注意：逗号应为英文逗号</span></span><br></pre></td></tr></table></figure>
<p>  变量初始化之后，可以重新赋值。</p>
<ul>
<li>固定值与final修饰的变量<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">MONTH_IN_YEAR</span> <span class="operator">=</span> <span class="number">12</span>; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="2-标识符-1"><a href="#2-标识符-1" class="headerlink" title="2. 标识符"></a>2. 标识符</h1><p>标识符由以下字符组成：</p>
<ul>
<li>字母</li>
<li>数字</li>
<li>下划线（_）</li>
<li>美元符号（$）</li>
</ul>
<p>标识符的命名规则：</p>
<ul>
<li>不能以数字开头</li>
<li>区分大小写</li>
<li>不能是Java中的关键字和保留字</li>
</ul>
<p><strong>关键字</strong>：Java中已使用的有专门用途的字符串。</p>
<p><strong>保留字</strong>：Java中预留的但暂未使用的字符串，如<code>goto</code>，<code>const</code>。</p>
<h1 id="包名、类名、接口名的命名规范"><a href="#包名、类名、接口名的命名规范" class="headerlink" title="包名、类名、接口名的命名规范"></a>包名、类名、接口名的命名规范</h1><ul>
<li><strong>包名</strong>：多单词组成时所有字母都小写。如<code>com.baidu.map</code>。</li>
<li><strong>类名、接口名</strong>：多单词组成时，所有单词的首字母大写。如<code>AnimalDemo</code>。</li>
</ul>
<h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h1><h2 id="3-1-数据类型的作用"><a href="#3-1-数据类型的作用" class="headerlink" title="3.1 数据类型的作用"></a>3.1 数据类型的作用</h2><p>对数据进行分类管理<br>为数据申请不同的内存空间</p>
<h2 id="3-2-数据类型的分类"><a href="#3-2-数据类型的分类" class="headerlink" title="3.2 数据类型的分类"></a>3.2 数据类型的分类</h2><p>Java的数据类型分为<strong>基本类型</strong>和<strong>引用类型（复合类型）</strong>。</p>
<h2 id="3-3-整数类型（byte、short、int、long）"><a href="#3-3-整数类型（byte、short、int、long）" class="headerlink" title="3.3 整数类型（byte、short、int、long）"></a>3.3 整数类型（byte、short、int、long）</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 数据类型与命名规范</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 命名规范</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 变量名、方法名</span></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**命名规则**</span>：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写（驼峰命名法）。</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**示例**</span>：<span class="code">`stuAge`</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 常量名</span></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**命名规则**</span>：所有字母都大写。多单词时每个单词用下划线连接。</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**示例**</span>：<span class="code">`PI_VALUE`</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 整数类型</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**byte**</span>（字节型）</span><br><span class="line"><span class="bullet">  -</span> 内存大小：8位（1字节）</span><br><span class="line"><span class="bullet">  -</span> 默认值：0</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**short**</span>（短整型）</span><br><span class="line"><span class="bullet">  -</span> 内存大小：16位</span><br><span class="line"><span class="bullet">  -</span> 默认值：0</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**int**</span>（整型）</span><br><span class="line"><span class="bullet">  -</span> 内存大小：32位</span><br><span class="line"><span class="bullet">  -</span> 默认值：0</span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**注意**</span>：整数默认是int类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**long**</span>（长整型）</span><br><span class="line"><span class="bullet">  -</span> 内存大小：64位</span><br><span class="line"><span class="bullet">  -</span> 默认值：0L</span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**声明**</span>：long型需要加&#x27;l&#x27;或&#x27;L&#x27;</span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**示例**</span>：</span><br><span class="line"><span class="code">    ```java</span></span><br><span class="line"><span class="code">    long d = 12l;</span></span><br><span class="line"><span class="code">    long d = 12L;</span></span><br></pre></td></tr></table></figure>

<h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><ul>
<li><p><strong>float</strong>（单精度浮点数）</p>
<ul>
<li>内存大小：32位</li>
<li>默认值：0.0F</li>
<li><strong>注意</strong>：float类型后面必须加F或f</li>
</ul>
</li>
<li><p><strong>double</strong>（双精度浮点数）</p>
<ul>
<li>内存大小：64位</li>
<li>默认值：0.0</li>
</ul>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 浮点型与字符型在Java中的表示</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 浮点型</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**float（单精度浮点数）**</span>：32位，例如 <span class="code">`0.0F`</span></span><br><span class="line"><span class="bullet">  -</span> 注意：<span class="code">`float`</span> 类型在声明时，后面必须加 <span class="code">`F`</span> 或 <span class="code">`f`</span>。</span><br><span class="line">  </span><br><span class="line">  示例：</span><br><span class="line">  <span class="code">```java</span></span><br><span class="line"><span class="code">  float f1 = 3.2f; // 1</span></span><br><span class="line"><span class="code">  float f2 = 3.5F; // 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>double（双精度浮点数）</strong>：64位，例如 <code>0.0</code></p>
<ul>
<li>注意：<code>double</code> 类型在声明时，后面可以加 <code>D</code> 或 <code>d</code>，但也可以不加（即浮点类型默认是 <code>double</code> 类型）。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">2.0D</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">2.1d</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="number">2.0</span>;  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>浮点型精度不准确</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">10.0F</span> / <span class="number">3</span>); <span class="comment">// 输出：3.3333333</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>);  <span class="comment">// 输出：3.3333333333333335</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>科学计数法</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">1.2E2</span>; <span class="comment">// 2</span></span><br><span class="line">System.out.println(d2); <span class="comment">// 输出：120.0</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="number">.12</span>; <span class="comment">// 5</span></span><br><span class="line">System.out.println(d3); <span class="comment">// 输出：0.12</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><ul>
<li><p><strong>char</strong>：Java中的字符采用Unicode字符集，支持中文字符，每个字符占16位。</p>
<ul>
<li>字符是用单引号（<code>&#39;</code>）包含的一个字符。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>; <span class="comment">// 表示一个字符</span></span><br><span class="line"><span class="comment">// 对于Unicode字符，如中文字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">cn</span> <span class="operator">=</span> <span class="string">&#x27;中&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>以上是在Java中浮点型和字符型的基本表示方法。<br>&#96;&#96;&#96;</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2024/10/06/git/</url>
    <content><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><span id="more"></span> 
<h1 id="git是什么？"><a href="#git是什么？" class="headerlink" title="git是什么？"></a>git是什么？</h1><pre><code>官网地址： 
    https://git-scm.com/

distributed version control system
</code></pre>
<h1 id="version-control-system？"><a href="#version-control-system？" class="headerlink" title="version control system？"></a>version control system？</h1><pre><code> Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. 
 记录文件变化的 并且 之后可以指定版本进行恢复

1.论文： 
    1.xxx_v1.doc 
    2.xxx_v2.doc 
    ...
    xxx_最终版.doc 

2.种类： 
    Local Version Control Systems： copy files into another directory
        优点：
            so simple
        缺点： 
            error prone 
            1.代码集成效率低下

    Centralized Version Control Systems 集中式版本控制系统： 
        解决： 代码集成效率低下 
            多人协同开发的问题
        问题：
            single point 单点故障

    Distributed Version Control Systems： 
            解决： 多人协同开发 单点故障
        1.clients

        2.server

    git： 
        1.efficiency.
        2.performance.
        3.分支操作、文件备份、定制工作流程
</code></pre>
<h1 id="文件版本控制："><a href="#文件版本控制：" class="headerlink" title="文件版本控制："></a>文件版本控制：</h1><pre><code>1.本地仓库
2.远程仓库
</code></pre>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><pre><code>1.下载
2.安装
3.使用： 
    1.git 软件 工具
        1.可视化界面的方式进行操作 =》 git原理
        2.git 命令操作 =》 linux 命令差不多

        linux 内核 林纳斯 
        git
</code></pre>
<h1 id="查看git版本"><a href="#查看git版本" class="headerlink" title="查看git版本"></a>查看git版本</h1><p>$ git -v<br>git version 2.38.0.windows.1</p>
<p>使用： 版本控制<br>    1.使用的前的配置 </p>
<pre><code>-- 要配置我们的项目开发人员的信息
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;zhangsan&quot;</span><br><span class="line">git config --global user.email &quot;zhangsan@qq.com&quot;</span><br><span class="line">	1.设置git参数 =》 本地仓库</span><br><span class="line">usage: git config [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line">Config file location</span><br><span class="line">    --global              use global config file  --对当前用户 所有仓库都有效</span><br><span class="line">    --system              use system config file  -- 对系统所有登录用户有效</span><br><span class="line">    --local               use repository config file -- 对某个仓库有效</span><br></pre></td></tr></table></figure>
<pre><code>思考： 
    单单对某一个项目来说 上面哪个参数 有限级高？
        --local
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config [options]</span><br><span class="line">option...</span><br><span class="line">查看配置参数： </span><br><span class="line">	git config --list </span><br><span class="line">	git config --list --global</span><br><span class="line">	git config --list --local</span><br></pre></td></tr></table></figure>
<p>1.创建仓库<br>    项目：开发的代码文件<br>    仓库：本地仓库 用于进行文件的版本控制的</p>
<pre><code>git init: 
    1.创建一个仓库
    2.重新初始化一个 以及存在的仓库
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init [-q | --quiet] [--bare] [--template=&lt;template-directory&gt;]</span><br><span class="line">          [--separate-git-dir &lt;git-dir&gt;] [--object-format=&lt;format&gt;]</span><br><span class="line">          [-b &lt;branch-name&gt; | --initial-branch=&lt;branch-name&gt;]</span><br><span class="line">          [--shared[=&lt;permissions&gt;]] [&lt;directory&gt;]</span><br><span class="line">	</span><br><span class="line">	git init [&lt;directory&gt;]</span><br></pre></td></tr></table></figure>

<p>项目：《&#x3D;》 本地仓库 【一个项目 对应一个本地仓库】<br>    1.存在：<br>        cd 项目目录<br>        git init<br>    2.不存在：<br>         git init <project_name><br>         git init test01：<br>         	1.创建一个项目 test01<br>            2. test01目录下下面 创建一个本地仓库 </p>
<pre><code>    .git 文件夹 本地仓库
</code></pre>
<p>使用<br>    git 管理版本控制的工作流程：<br>        工作区： 项目目录<br>        暂存区： 临时存储文件的地方 可以进行撤回<br>        本地仓库：版本控制</p>
<p> 入门：<br>    1.vim 1.log<br>    2.git add 1.log  &#x3D;&gt; 添加到暂存区<br>    3.git commit -m “Add 1.log” &#x3D;&gt; 添加到 本地仓库<br>    4.git log 查看本地仓库历史 ：当前项目的 commit历史</p>
<p>git commit  -m <msg></p>
<pre><code>总结： 
    本地仓库 ： 
        如何进行版本控制？
            commit 进行区分版本的

切换版本： 可以使用
    git reset --hard [&lt;commit&gt;]

    git reset --hard d7db6e
</code></pre>
<p>了解：<br>     git log –reflog</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型</title>
    <url>/2024/10/03/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="java的数据类型"><a href="#java的数据类型" class="headerlink" title="java的数据类型"></a>java的数据类型</h1><span id="more"></span>
<p>基本类型：8个基本类型。 类型首字母小写</p>
<p>引用类型： 对象类型。</p>
<h2 id="1-1-八个基本类型"><a href="#1-1-八个基本类型" class="headerlink" title="1.1 八个基本类型"></a>1.1 八个基本类型</h2><p> &#x2F;&#x2F; 0开头时8进制， 0b时二进制， 0x十六进制</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>byte 字节</td>
<td>8位，   8bit</td>
<td>-128-127<br />0111 1111     127<br /><br />1000 0000     -128</td>
<td>网络传输，文件的大小</td>
</tr>
<tr>
<td>short 短整型</td>
<td>2byte  16位</td>
<td>（-2的n-1次方~2的n-1次方-1）</td>
<td>16位计算机用</td>
</tr>
<tr>
<td>int 整型</td>
<td>4byte  32位</td>
<td></td>
<td>字面量</td>
</tr>
<tr>
<td>long 长整型</td>
<td>8byte  64位</td>
<td></td>
<td>毫秒数（1970-1-1凌晨到现在的毫秒数）</td>
</tr>
<tr>
<td>float 单精度浮点型</td>
<td>32位</td>
<td>默认大于整数</td>
<td>有效位数8位</td>
</tr>
<tr>
<td>double双精度浮点型</td>
<td>64</td>
<td></td>
<td>字面量。 浮点型都<code>不能</code>参与运算</td>
</tr>
<tr>
<td>boolean布尔型</td>
<td>1bit</td>
<td>true, false</td>
<td></td>
</tr>
<tr>
<td>char字符型</td>
<td>2byte 16位</td>
<td></td>
<td>和整数隐式转换， 可以参与运算</td>
</tr>
</tbody></table>
<h2 id="1-2-字符型"><a href="#1-2-字符型" class="headerlink" title="1.2 字符型"></a>1.2 字符型</h2><ul>
<li>ASCII码: 1byte范围 0~127</li>
</ul>
<p>0: 空字符<code> ‘’</code></p>
<p>32: 空格 <code>&#39; &#39;</code></p>
<p>49:  字符<code>&#39;1&#39;</code></p>
<p>65: ‘A’</p>
<p>97: ‘a’</p>
<ul>
<li>转义字符：</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">\&#x27;   \&quot;  \r  \n  \t   \\</span><br></pre></td></tr></table></figure>

<ul>
<li>Unicode码：  <code>\uFFFF</code> 四个十六进制数表示 两个字节的字符</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 定义byte型变量时 a1</span></span><br><span class="line">		<span class="type">byte</span> a1;</span><br><span class="line">		<span class="comment">// （编译时隐式转换） </span></span><br><span class="line">		a1 = <span class="number">127</span>; <span class="comment">// 0开头时8进制， 0b时二进制， 0x十六进制</span></span><br><span class="line">		<span class="comment">// byte a2 = 128; 超过范围</span></span><br><span class="line">		System.out.println(a1);</span><br><span class="line">		<span class="type">short</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="number">1024</span>; <span class="comment">// 字面量常亮数值1024 默认时int型的</span></span><br><span class="line">		System.out.println(a3);		</span><br><span class="line">		<span class="type">long</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="number">120</span>; <span class="comment">// 120 是32位</span></span><br><span class="line">		a4 = <span class="number">120L</span>; <span class="comment">// 120L 是64位</span></span><br><span class="line">		System.out.println(a4);</span><br><span class="line">		System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">		<span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.12345678901234567f</span>;</span><br><span class="line">		System.out.println(f);</span><br><span class="line">		<span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0.12345678901234567</span>;</span><br><span class="line">		System.out.println(d);</span><br><span class="line">		System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);</span><br><span class="line">		System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">		System.out.println(a + <span class="number">0</span>);</span><br><span class="line">		<span class="type">char</span> <span class="variable">a5</span> <span class="operator">=</span> <span class="number">65</span>;</span><br><span class="line">		System.out.println( (<span class="type">char</span>)a5 );</span><br><span class="line">		<span class="type">char</span> <span class="variable">a6</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		System.out.println(a6 + <span class="number">0</span>);</span><br><span class="line">		System.out.println( (<span class="type">char</span>) <span class="number">57</span>);</span><br><span class="line">		System.out.println( <span class="string">&#x27;A&#x27;</span> &gt; <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">		System.out.println( <span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">		System.out.println( <span class="string">&#x27;	&#x27;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="type">char</span> <span class="variable">a7</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		System.out.println(a7);</span><br><span class="line">		</span><br><span class="line">		<span class="type">char</span> <span class="variable">a8</span> <span class="operator">=</span> <span class="string">&#x27;丁&#x27;</span>;</span><br><span class="line">		System.out.println(a8 + <span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="type">char</span> <span class="variable">a9</span> <span class="operator">=</span> <span class="string">&#x27;\u4E01&#x27;</span>; <span class="comment">// Unicode码</span></span><br><span class="line">		System.out.println(a9);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-3-基本类型转换"><a href="#1-3-基本类型转换" class="headerlink" title="1.3 基本类型转换"></a>1.3 基本类型转换</h2><p>小 转 大  隐式</p>
<p>大 转 小  强制转换<code>a = (byte) b;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">b = a; <span class="comment">// 小 转 大  隐式</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">11</span>;</span><br><span class="line">a = (<span class="type">byte</span>) b; <span class="comment">// 大 转 小  强制转换</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">a = (<span class="type">byte</span>) <span class="number">128</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// ???</span></span><br><span class="line"></span><br><span class="line">a = (<span class="type">byte</span>) <span class="number">1234</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// ???</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 32int ===&gt; 32浮点</span></span><br><span class="line"><span class="type">long</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a1 = (<span class="type">long</span>) f1; <span class="comment">// 32浮点  ===&gt; 64long </span></span><br></pre></td></tr></table></figure>
















]]></content>
  </entry>
</search>
