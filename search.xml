<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MYSQL2</title>
    <url>/2024/10/05/MYSQL2/</url>
    <content><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><span id="more"></span>
<h1 id="查看表中描述"><a href="#查看表中描述" class="headerlink" title="查看表中描述"></a>查看表中描述</h1><pre><code>desc tablename;
</code></pre>
<h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><pre><code>create 建表规范：
    1.表名字 一定是英文 不要写中文  汉语拼音
    2.建表风格
        1.主键 使用表中第一个字段使用自增主键 本身没有任何 业务意义
    3.字段的注释
</code></pre>
<p>业务字段<br>非业务字段:<br>    1.表创建表用户 vs 更新表用户<br>    2.主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user_info2(</span><br><span class="line">	id int(3) not null  auto_increment,</span><br><span class="line">	name varchar(10) COMMENT &#x27;用户名称&#x27;,</span><br><span class="line">	age int(3),</span><br><span class="line">	create_user varchar(10),</span><br><span class="line">	create_time timestamp not null default current_timestamp,</span><br><span class="line">	update_user varchar(10),</span><br><span class="line">	update_time  timestamp not null default current_timestamp on update current_timestamp</span><br><span class="line">	,primary key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [INTO] tbl_name</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br><span class="line">    [ON DUPLICATE KEY UPDATE assignment_list]</span><br><span class="line">insert into user_info (name,age) VALUES(&#x27;zs&#x27;,18),(&#x27;ls&#x27;,20);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into user_info (name,age) VALUES(&#x27;zs01&#x27;,18),(&#x27;ls01&#x27;,20);</span><br></pre></td></tr></table></figure>
<p>NULL: 空值<br>    ‘’ ‘null’ ‘NULL’</p>
<h1 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_reference</span><br><span class="line">    SET assignment_list</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [ORDER BY ...]</span><br><span class="line">    [LIMIT row_count]</span><br><span class="line">where 过滤</span><br><span class="line">update user_info set age=&#x27;20&#x27;; =》 对整张表</span><br><span class="line">update user_info set age=&#x27;20&#x27; where name=&#x27;zs&#x27; ; 对某条数据</span><br><span class="line"></span><br><span class="line">update 语句 注意： where</span><br></pre></td></tr></table></figure>
<h1 id="删除一条数据"><a href="#删除一条数据" class="headerlink" title="删除一条数据"></a>删除一条数据</h1><pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name</span><br><span class="line">    [PARTITION (partition_name [, partition_name] ...)]</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [ORDER BY ...]</span><br><span class="line">    [LIMIT row_count]</span><br></pre></td></tr></table></figure>
</code></pre>
<p>delete from user_info where id&#x3D;1;<br>注意：<br>    delete 也要考虑 是否加where</p>
<p>insert into user_info (name,age) VALUES(‘zs’,18),(‘ls’,20);<br>insert into user_info (name,age) VALUES(‘aa’,10),(‘01’,10);<br>insert into user_info (name,age) VALUES(‘bb’,11),(‘02’,20);<br>insert into user_info (name,age) VALUES(‘vv’,12),(‘03’,30);<br>insert into user_info (name,age) VALUES(‘dd’,13),(‘04’,21);</p>
<p>insert into user_info (name,age) VALUES(‘zs’,19),(‘zs’,21);</p>
<h1 id="表的字符集："><a href="#表的字符集：" class="headerlink" title="表的字符集："></a>表的字符集：</h1><pre><code>udf8 
    Incorrect string value: &#39;\xE5\xAD\x90\xE8\x88\xAA...&#39; for column &#39;name
mysql 5.7版本 默认建表字符集 ：latin1
解决：修改字符集 、建表直接指定字符集 utf8
</code></pre>
<h1 id="6-删除表"><a href="#6-删除表" class="headerlink" title="6.删除表"></a>6.删除表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	drop table user_info;</span><br><span class="line"></span><br><span class="line">	CREATE TABLE `user_info` (</span><br><span class="line">  `id` int(3) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(10) DEFAULT NULL,</span><br><span class="line">  `age` int(3) DEFAULT NULL,</span><br><span class="line">  `create_user` varchar(10) DEFAULT NULL,</span><br><span class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `update_user` varchar(10) DEFAULT NULL,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB  DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
<h1 id="7-其他语法"><a href="#7-其他语法" class="headerlink" title="7.其他语法"></a>7.其他语法</h1><p>1.where  过滤条件<br>    1. &gt;<br>    2.&lt;<br>    3. &#x3D;<br>    4. and or in not in<br>mysql&gt; select * from user_info where age &gt; 18;<br>select * from user_info where name&#x3D;’子航01’;<br>mysql&gt; select *  from user_info where name&#x3D;’zs’ and age&gt;18;<br>mysql&gt; select *  from user_info where age&gt;20 or name&#x3D;’zs’;</p>
<p>产品给你 1000个数据值  in<br>select *  from user_info where name&#x3D;’zs’ or name &#x3D; ‘ls’ or name &#x3D;”ww”<br>select *  from user_info where name in (‘zs’,’ls’,’ww’);<br>    not in<br>select *  from user_info where name not in (‘zs’,’ls’,’ww’);</p>
<h1 id="order-by-排序语法"><a href="#order-by-排序语法" class="headerlink" title="order by 排序语法"></a>order by 排序语法</h1><pre><code>mysql&gt; select *  from user_info order by age;

 order by column [asc | desc] ,...

1.默认是升序 
2. asc desc 降序 
</code></pre>
<p>mysql&gt; select *  from user_info order by age ,name desc;</p>
<h1 id="like语法-模糊查询"><a href="#like语法-模糊查询" class="headerlink" title="like语法 模糊查询"></a>like语法 模糊查询</h1><pre><code>1.like  rlike regexp  正则表达式【了解】
    1.% 模糊 
    2.占位符 _
</code></pre>
<p>mysql&gt; select *  from user_info where name like ‘%z%’;<br>mysql&gt; select *  from user_info where name like “_s%”;</p>
<pre><code>insert into user_info (name) VALUES(&#39;zihsssg04&#39;);
insert into user_info (name) VALUES(&#39;zshsssg04&#39;);
insert into user_info (name) VALUES(&#39;zshsssg04&#39;);
insert into user_info (name) VALUES(&#39;zshsssg04&#39;);
</code></pre>
<p>需求：<br>    1.name 字母开头是y<br>select  *  from user_info where name like “y%”;<br>    2.name 字母结尾是1<br>select  *  from user_info where name like “%1”;<br>    3.name 含有字母h<br>select  *  from user_info where name like “%h%”;<br>    4.name查询第3个字母是h的数据<br>select  *  from user_info where name like “__h%”;</p>
<h1 id="合并表"><a href="#合并表" class="headerlink" title="合并表"></a>合并表</h1><pre><code>1.union  去重
2.union all  不去重
</code></pre>
<p>create table a(id int(3),name varchar(4));<br>create table b(id int(3),name varchar(4));</p>
<p>insert into a values(1,’zs’);<br>insert into b values(1,’zs’);<br>insert into b values(2,’ls’);</p>
<p>1.union</p>
<p>select *  from a<br>union<br>select *  from b;</p>
<p>2.union all<br>select *  from a<br>union  all<br>select *  from b;</p>
<h1 id="null"><a href="#null" class="headerlink" title="null"></a>null</h1><pre><code>数据清洗 
    1.过滤null 
        is null 
        is not null 
</code></pre>
<p>select *  from user_info where age is null;</p>
<pre><code>    2.null数据进行 【数据转换】
    update 
</code></pre>
<p>数据分析时候 ：<br>    delte 、update </p>
<p>函数：<br>    处理 null的函数：<br>        1.coalesce()<br>        2.ifnull</p>
<p>select<br>id<br>,name<br>,coalesce(age,0) as age_alias<br>,create_user<br>,create_time<br>,update_user<br>,update_time<br>from user_info</p>
<p>select<br>id<br>,name<br>,ifnull(age,0) as age_alias<br>,create_user<br>,create_time<br>,update_user<br>,update_time<br>from user_info</p>
<h1 id="聚合函数：-指标"><a href="#聚合函数：-指标" class="headerlink" title="聚合函数： 指标"></a>聚合函数： 指标</h1><pre><code>多行数据按照一定规则 进行聚合为一行 
sum max min avg count 
理论上：
    聚合后的行数 &lt;= 聚合前的行数
</code></pre>
<p>insert into user_info (name,age) values(“zs”,10);<br>insert into user_info (name,age) values(“zs”,11);<br>insert into user_info (name,age) values(“zs”,12);<br>insert into user_info (name,age) values(“ls”,10);<br>insert into user_info (name,age) values(“ls”,20);<br>insert into user_info (name,age) values(“ls”,30);<br>insert into user_info (name,age) values(“ww”,30);</p>
<pre><code>1.聚合函数 
select 
sum(age) as age_sum,
max(age) as age_max
,min(age) as age_min
,avg(age) as age_avg
,count(age) as cnt
from user_info

2.分组语法
</code></pre>
<p>词频统计：<br>    wordcount </p>
<pre><code>x 
y
y
z 
</code></pre>
<p>word,1<br>&#x3D;&gt;  对每个单词进行分组  分组<br>    x,&lt;1&gt;<br>    y,&lt;1,1&gt;<br>    z,&lt;1&gt;<br>&#x3D;&gt; 聚合 sum<br>    x,1<br>    y,1+1 &#x3D;2<br>    z,1</p>
<pre><code>group by  column...
</code></pre>
<p>需求：<br>    按照name进行分组，求每组的平均年龄</p>
<p>分组聚合</p>
<p>select<br>name,<br>avg(age) as age_avg<br>from user_info<br>group by name</p>
<pre><code>需求： 
    user_info 各个name的最大年龄、最小年龄、以及人数？
</code></pre>
<p>select<br>name,<br>max(age) as age_max,<br>min(age) as age_min,<br>count(age) as cnt<br>from user_info<br>group by name </p>
<p>分组聚合:注意：<br>    1.select 字段 和  group by 字段 要对应 【非聚合函数字段】</p>
<p>select<br>name,<br>id,<br>max(age) as age_max,<br>min(age) as age_min,<br>count(age) as cnt<br>from user_info<br>group by name ,id</p>
<pre><code>维度不一样： 
    1.
        维度： name 
        指标：最大年龄、最小年龄、以及人数
    2. 
         维度： name、id 
         指标：最大年龄、最小年龄、以及人数
</code></pre>
<p>select<br>name,<br>max(age) as age_max,<br>avg(age) as age_avg,<br>count(age) as cnt<br>from user_info<br>group by name </p>
<p>求：<br>    上面的结果 求： age_avg 大于 18岁的 信息？<br>1.分组聚合 + having<br>select<br>name,<br>max(age) as age_max,<br>avg(age) as age_avg,<br>count(age) as cnt<br>from user_info<br>group by name<br>having age_avg &gt; 18<br>    总结：<br>        条件过滤：<br>            1.where 写在 from 后面<br>            2.having 写在 group by 后面</p>
<pre><code>上面的结果 求： age_avg 大于 18岁的 信息？
</code></pre>
<ol>
<li>子查询：<br> 查询里面 嵌套查询<br>select<br>name,<br>age_max,<br>age_avg,<br>cnt<br>from<br>(<br> select<br> name,<br> max(age) as age_max,<br> avg(age) as age_avg,<br> count(age) as cnt<br> from user_info<br> group by name<br>) as res<br>where<br> age_avg &gt;18;</li>
</ol>
<h1 id="join-多表联查"><a href="#join-多表联查" class="headerlink" title="join 多表联查"></a>join 多表联查</h1><pre><code>种类： 
    4种 广义上
内连接、左连接、右连接、全连接
</code></pre>
<p>内连接 **<br>左连接 **<br>全连接 *</p>
<p>create table a1(id int(3),name varchar(10),address varchar(20));<br>create table b1(id int(3),name varchar(10),age int(3));</p>
<p>insert into a1 values(1,’aa’,”dalian”);<br>insert into a1 values(2,’bb’,”shenyang”);<br>insert into a1 values(4,’dd’,”beijing”);<br>insert into b1 values(1,’aa’,10);<br>insert into b1 values(2,’bb’,20);<br>insert into b1 values(3,’cc’,21);</p>
<pre><code>1.内连接
join 
</code></pre>
<p>select </p>
<p>*<br>from a1 join b1<br>on a1.id &#x3D; b1.id	</p>
<p>select </p>
<p>*<br>from a1 inner join b1<br>on a1.id &#x3D; b1.id	</p>
<pre><code>2.左连接
left join 
    以左表为主 数据是全的 右表来匹配 匹配不上就是null 
</code></pre>
<p>select</p>
<p>*<br>from a1 left join b1<br>on a1.id &#x3D;b1.id;<br>    3.右连接<br>    right join<br>        以右表为主 数据是全的 左表来匹配 匹配不上就是null<br>select</p>
<p>*<br>from a1 right join b1<br>on a1.id &#x3D;b1.id;</p>
<pre><code>4.全连接 -- mysql 不支持全连接
    左表右表数据是全的，而且没有重复数据
full join 
</code></pre>
<p>select</p>
<p>*<br>from a1 left join b1<br>on a1.id &#x3D;b1.id<br>union<br>select</p>
<p>*<br>from a1 right join b1<br>on a1.id &#x3D;b1.id</p>
<h1 id="查询数据条数-显示限制"><a href="#查询数据条数-显示限制" class="headerlink" title="查询数据条数 显示限制"></a>查询数据条数 显示限制</h1><pre><code>limit 
场景： 
    1.显示 避免发生 滚屏效果

    小表 select *  from table ; 几千条数据 

    table： 100M 1PB  1TB
</code></pre>
<p>mysql: 极限 &#x3D;》 TB级别 相应速度 s级别 ms级别【添加索引】<br>    1Tb  select *  from table<br>    dba </p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2024/10/03/Linux/</url>
    <content><![CDATA[<h1 id="Linux概述："><a href="#Linux概述：" class="headerlink" title="Linux概述："></a>Linux概述：</h1><span id="more"></span>
<pre><code>1.操作系统
2.linux 
3.版本：
    Ubuntu 、 centos、debian、redhat。。。

    win： 大版本 
    小版本 

    centos ： 
        6.x  
        7.x  主流
        8.x
</code></pre>
<h1 id="2-为什么要使用Linux？"><a href="#2-为什么要使用Linux？" class="headerlink" title="2.为什么要使用Linux？"></a>2.为什么要使用Linux？</h1><pre><code>1.生产上： 
    大数据组件基于linux 进行开发部署
2.java 算法 
</code></pre>
<h1 id="3-部署linux系统"><a href="#3-部署linux系统" class="headerlink" title="3.部署linux系统"></a>3.部署linux系统</h1><pre><code>1.win： 
    1.虚拟机 要求： 
        1.你的winwow 配置 内存 8G 
        2. 伤window 磁盘 

    2.云主机 ： 
        1.云厂商 ： 
            阿里云、腾讯云、华为云、京东云
            1.3个月 69
            2.按需分配 
</code></pre>
<h1 id="4-虚机机-部署linux系统："><a href="#4-虚机机-部署linux系统：" class="headerlink" title="4.虚机机 部署linux系统："></a>4.虚机机 部署linux系统：</h1><pre><code>win： 
    1.虚拟化的软件 ： 
        vmware 、vbox。。。
            1.linux镜像 

1.安装 vmware 
    1.注册码 =》文档里有
    2.win 不支持vmware安装 ： 
        1.bios 没有打开

2.打开vmware 
    1.关联linux镜像   =》 linux部署 
</code></pre>
<p>linux部署：<br>    1.稍后安装<br>    2. 机器的名字+路径：机器存储路径 + 存储路径<br>    3.资源：<br>        1.cpu ： 2core<br>        2.mem：4g 、2g<br>        3.df 40G<br>    4.关联linux镜像 </p>
<p>linux启动： 4g 40G<br>    centos 7.5 ：简单配置<br>        1.语言：<br>            中文<br>        2.软件：<br>             软件选择：带桌面安装</p>
<pre><code>    3.系统配置：
        1.kdump 关闭 =》 保护机制 
        2.网络： 
            1.网卡打开
            2.hostname
        3.磁盘划分 ： 
            1.boot =》 存放linux启动的资源 1g 
                file system =》 ext4
            2.swap: 2g
                把磁盘资源 当做 内存来使用 
            3./ 根目录 ： 
                linux全部存储空间 磁盘大小
                file system =》 ext4
</code></pre>
<p>linux系统：<br>    1.用户：<br>        root  最高权限用户 </p>
<p>远程登录访问：<br>    1.win&#x2F;mac:<br>        1.安装xshell<br>            远程登录工具：<br>                xshell、crt、finlshell 【百度搜想要的远程工具推荐】</p>
<pre><code>    2.远程登录 ： -- 打开xshell
        1.机器的ip ：192.168.10.22  【ifconfig 查看自己的ip 】
        2.用户名 root
        3.密码 123456
        4.端口 22
</code></pre>
<p>linux系统：<br>    1.层级式文件存储系统<br>        根目录 &#x2F;</p>
<p>linux命令<br>[root@bigdata22 ~]#<br>    root 默认的管理员 最大权限用户<br>    bigdata22 机器的名字<br>    ~  当前用户的 家目录 </p>
<p>1.pwd 查看当前光标所在的目录<br>[root@bigdata22 ~]# pwd<br>&#x2F;root</p>
<p>2.ls 查看光标所在的目录下面<br>    ls  显示 文件夹和文件<br>    ls -l 显示额外的信息【权限、用户用户组 大小 时间】<br>    ls -l -a 显示以.开头的文件和文件夹<br>            以.开头的文件和文件夹 隐藏文件<br>    ls -l -h 查看文件的大小</p>
<pre><code>命令帮助：
    命令 --help 

ls --help
用法：ls [选项]... [文件]...

[] 可选
... 多个

ls -l =&gt; ll 等价 别名

需求： 
    一个目录下面 有1000多个文件 查找 最新更改的文件 ？ 

ll -r -t  =&gt; ll -rt
</code></pre>
<p>3.mkdir 创建文件夹<br>    [root@bigdata22 ~]# mkdir bigdata<br>    1.并级<br>        [root@bigdata22 ~]# mkdir dir1 dir2 dir3<br>    2.串级<br>        [root@bigdata22 ~]# mkdir -p dir4&#x2F;dir5&#x2F;dir6</p>
<p>4.cd 切换目录、路径、文件夹<br>    [root@bigdata22 ~]# cd bigdata&#x2F;<br>        &#x2F;</p>
<pre><code>    路径： 
        绝对路径：光标从 根目录开始的 
            cd /root/dir2
        相对路径：光标从 当前开始
            cd ./dir2/

cd ../ 退回到上一层级目录
cd ../../

../ 
./ 当前目录

~ 当前用户的 家目录
    root 家目录 /root 
    其他用户
    xx  家目录 /home/xx

如何快速回到家目录？
    1. cd /root 
    2. cd 回车  ==&gt;推荐
    3. cd ~

cd - 回到上一次操作的目录
</code></pre>
<p>5.创建文件<br>    常用：<br>        1.touch 1.log<br>        2.vi&#x2F;vim 2.log<br>    不常用：<br>        echo “bigdata” &gt; 3.log<br>echo “bigdata” 打印</p>
<blockquote>
<p>创建或者覆盖一个文件</p>
<blockquote>
<p>追加</p>
</blockquote>
</blockquote>
<p>6.编辑文件 vi&#x2F;vim<br>    三种模式：<br>        1.命令行模式<br>        2.编辑模式<br>        3.尾行模式</p>
<pre><code>vim xx.log =&gt; 命令行模式 
按键盘 i键  =》 编辑模式
按键盘 esc键 编辑模式 =》命令行模式
按键盘 shift+; =&gt; : 键 命令行模式 =》尾行模式  输入 wq 保存退出

尾行模式： 
    w 保存
    q 退出
    ! 强制
</code></pre>
<p>7.查看文件<br>    cat  查看文件所有内容 输出到控制台<br>    more 文件内容 一页一页的 按空格 往下翻 q退出<br>    less 文件内容 一页一页的 按上下键 q退出</p>
<pre><code>    看小文件： 
        cat 
    看大文件 vim
        more less

实时查看文件新产生的内容 
    tail ： 
        -f 1.log
        -F  = -f +retry
    
    ctrl +c /  ctrl +z  中断命令

场景： 
    log： 
        日志级别 info、warn、 error
    如何定位 error信息？ 
        1.vim xxx.log  搜索 error词 ： 
            尾行模式：输入 /要找的词 
                键盘 n 查找下一个词 
                    N 找上一个词
            
            日志文件 1G 100w个 
        2.cat 
            cat vmware-vmsvc.log | grep error  &gt; error.log 
            定位 error 上下文
            cat vmware-vmsvc.log | grep -A 3 error &gt; error.log =》 error 后10行
            cat vmware-vmsvc.log | grep -B 3 error &gt; error.log =》 error 前10行
            cat vmware-vmsvc.log | grep -C 3 error &gt; ~/error.log =》 error 前后各10行
</code></pre>
<p>| 管道符 &#x3D;》上一个命令的结果 作为下一个命令的输入<br>grep 过滤 文本所在的一行</p>
<p>8.文件上传下载<br>    上传：win &#x3D;》 linux<br>    下载： linux &#x3D;》 win </p>
<pre><code>1.xshell工具 xftp
2.linux命令
    yum install -y lrzsz 
</code></pre>
<p>9.自动补全<br>    tab ：<br>        按一次  匹配的东西 就一个 自动补全<br>        按两次 把匹配东西全部匹配出来<br>10.清屏 ：<br>    clear<br>    ctrl +l</p>
<p>11.查看历史命令<br>    history<br>        1.快速执行</p>
<ol start="12">
<li><p>mv 移动  cp 复制</p>
<p>mv [选项]… 源文件… 目录<br>mv dir1 bigdata<br>cp [选项]… 源文件… 目录<br>cp  -r dir2 bigdata<br>mv 始终是一份  快<br>cp 两份		 慢</p>
<p>改名字：</p>
</li>
</ol>
<p>13.rm 删除文件或者文件夹 【高危命令】<br>    rm [选项]… 文件…<br>        有删除提示：<br>            删除文件：<br>                rm error.log<br>            删除文件夹：<br>                [root@bigdata22 ~]# rm -r dir3_blk<br>        强制删除：没有提示<br>            [root@bigdata22 ~]# rm -f 2.log<br>            [root@bigdata22 ~]# rm -r -f dir2_blk</p>
<pre><code>    rm -r -f xxx =&gt; rm -rf  xxx 

rm -rf / =&gt; 删库跑路  root 权限限制
</code></pre>
<p>14.别名 alias</p>
<pre><code>1.创建别名 
    alias aa=&quot;cd /tmp&quot;  =&gt; 仅仅是当前会话生效 

    [root@bigdata22 ~]# aa
    bash: aa: 未找到命令...
    是因为没有在 环境变量文件里面 进行配置 
</code></pre>
<p>15.环境变量：<br>    jdk &#x3D;》 path<br>    环境变量路径：[root@bigdata22 ~]# echo $PATH<br>        &#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin</p>
<pre><code>1.全局环境变量 
    /etc/profile  所有用户都可以使用

2.个人环境变量	 只能当前用户使用 其他用户 不能使用
        ~/.bashrc 【建议】
        ~/.bash_profile

3.生效环境变量 
    1.source /etc/profile
    2.重新打开一个会话

    个人：
        alias cc=&quot;cd /tmp&quot;
</code></pre>
<p>1.用户管理命令<br>    linux 用户：<br>        用户<br>        用户组</p>
<pre><code>yizi： 
    hr、财务


1.查看用户相关的命令 
[root@bigdata22 ~]# ll /usr/sbin/user*
-rwxr-x---. 1 root root 118192 11月  6 2016 /usr/sbin/useradd
-rwxr-x---. 1 root root  80360 11月  6 2016 /usr/sbin/userdel
-rwxr-x---. 1 root root 113840 11月  6 2016 /usr/sbin/usermod
2.	查看用户组相关的命令
    [root@bigdata22 ~]# ll /usr/sbin/group*
-rwxr-x---. 1 root root 65480 11月  6 2016 /usr/sbin/groupadd
-rwxr-x---. 1 root root 57016 11月  6 2016 /usr/sbin/groupdel
-rwxr-x---. 1 root root 57064 11月  6 2016 /usr/sbin/groupmems
-rwxr-x---. 1 root root 76424 11月  6 2016 /usr/sbin/groupmod

3.创建用户
[root@bigdata22 ~]# useradd uzi
</code></pre>
<p>[root@bigdata22 ~]# id uzi<br>uid&#x3D;1005(uzi) gid&#x3D;1006(uzi) 组&#x3D;1006(uzi)、</p>
<pre><code>创建一个普通用户 uzi  用户名称 uzi
也会创建一个 uzi 用户组
会把主组 设置成 uzi 
同时 也会创建一个家目录： /home/uzi

用户的信息 /etc/passwd
用户组的信息 /etc/group

4.切换用户 
    su uzi
    su - uzi 切换用户的同时 也会获得 该用户的环境变量以及执行 【推荐】

5.
    场景： 
        [root@bigdata22 ~]# useradd uzi
</code></pre>
<p>useradd：警告：此主目录已经存在。<br>不从 skel 目录里向其中复制任何文件。 &#x3D;》 提供样式 以及环境变量的文件<br>正在创建信箱文件: 文件已存在</p>
<p>[root@bigdata22 ~]# ll -a &#x2F;etc&#x2F;skel&#x2F;<br>总用量 32<br>drwxr-xr-x.   3 root root  4096 4月  11 2018 .<br>drwxr-xr-x. 135 root root 12288 11月  1 09:51 ..<br>-rw-r–r–.   1 root root    18 4月  11 2018 .bash_logout<br>-rw-r–r–.   1 root root   193 4月  11 2018 .bash_profile<br>-rw-r–r–.   1 root root   231 4月  11 2018 .bashrc<br>drwxr-xr-x.   4 root root  4096 4月  12 2022 .mozilla</p>
<p>用户样式丢失的问题？<br>    1.[root@bigdata22 uzi]# cp &#x2F;etc&#x2F;skel&#x2F;.* .&#x2F;</p>
<p>添加用户组： [root@bigdata22 ~]# groupadd bigdata</p>
<p>场景 ：<br>    uzi ： uzi<br>    1.uzi 用户 额外追加一个bigdata组？<br>    [root@bigdata22 ~]# usermod  -a -G bigdata    uzi</p>
<pre><code>2.修改主组 并添加附属组
[root@bigdata22 ~]# usermod  -a -G bigdata    uzi
[root@bigdata22 ~]# id uzi
uid=1005(uzi) gid=1006(uzi) 组=1006(uzi),1003(bigdata)
[root@bigdata22 ~]# usermod -g bigdata  uzi
[root@bigdata22 ~]# id uzi
uid=1005(uzi) gid=1003(bigdata) 组=1003(bigdata)
[root@bigdata22 ~]# usermod  -a -G uzi    uzi
[root@bigdata22 ~]# id uzi
uid=1005(uzi) gid=1003(bigdata) 组=1003(bigdata),1006(uzi)
</code></pre>
<p>2.设置用户密码<br>    passwd :<br>        1.修改当前用户的密码<br>        [root@bigdata22 ~]# passwd<br>        更改用户 root 的密码 。<br>        新的 密码：<br>        无效的密码： 密码少于 8 个字符<br>        重新输入新的 密码：<br>        passwd：所有的身份验证令牌已经成功更新。</p>
<pre><code>    2.修改其他用户密码
        [root@bigdata22 ~]# passwd uzi
        更改用户 uzi 的密码 。
        新的 密码：
        无效的密码： 密码少于 8 个字符
        重新输入新的 密码：
        passwd：所有的身份验证令牌已经成功更新。
</code></pre>
<p>3.sudo 普通用户 临时具有 使用root的最大权限 </p>
<pre><code>1.vim /etc/sudoers
    uzi ALL=(root)  NOPASSWD: ALL

2.[uzi@bigdata22 root]$ sudo ls
1.log  bigdata	dir3  dir4
</code></pre>
<p>场景：<br>    su 和 sudo 能不能一起使用？ 使用的场景是什么？<br>    能<br>    1.sudo ：切换用户<br>    2.root sudo</p>
<p>4.&#x2F;etc&#x2F;passwd<br>    1.&#x2F;sbin&#x2F;nologin  有提示<br>    2.&#x2F;usr&#x2F;bin&#x2F;false 没有提示 </p>
<pre><code>CDH平台：hadoop、hive、yarn、hdfs、flume、hue
su - yarn 
/sbin/nologin /usr/bin/false =&gt; /bin/bash
</code></pre>
<p>5.文件权限相关命令<br>    [root@bigdata22 ~]# ll<br>总用量 16<br>-rw-r–r–. 1 root root    4 10月 31 14:52 1.log<br>第一个字母： d 文件夹 - 文件 l 连接<br>后面9个字母 三个为一组 ：<br>rw- r– r–</p>
<p>r: read  读的权限 4<br>w：write 写的权限 2<br>x：执行权限       1<br>-：没权限         0</p>
<p>第一组：rw- 4+2+0&#x3D;6 代表文件或者文件夹的所属用户的 权限<br>第二组：r– 4+0+0&#x3D;4 代表文件或者文件夹的所属用户组的权限<br>第三组：r– 4+0+0&#x3D;4 代表文件或者文件夹的其他用户组的权限</p>
<p>rw-r–r– 644</p>
<p>7：4 2 1<br>6：4 2 0<br>5：4   1</p>
<p>-rwxr-xr-x  root root bigdata<br>    uzi </p>
<p>关于权限修改命令：<br>    chmod     修改文件或者文件夹的权限：<br>        chmod 640 1.log  &#x3D;》 文件<br>        chmod -R 640 &#x2F;bigdata &#x3D;&gt; 文件夹 </p>
<pre><code>chown  修改文件或者文件夹的用户和用户组
    chown [选项]... [所有者][:[组]] 文件...

    chown  uzi:uzi 1.log  =&gt; 文件 
    chown -R uzi:uzi /bigdata =&gt; 文件夹 
</code></pre>
<p>权限相关的场景？<br>    – </p>
<p>6.大小<br>    文件：ll -h  、 du -sh<br>    文件夹： du -sh</p>
<p>7.搜索文件<br>    find<br>    locate 【不用它】</p>
<p>find [-H] [-L] [-P]<br> [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path…] [expression]</p>
<p> find [path…] [expression]</p>
<pre><code>    expression： -name &quot;xxx&quot;
</code></pre>
<p>find &#x2F; -name “1.log”</p>
<p>8.vi、vim命令<br>    1.编辑文件<br>        尾行模式 wq 保存退出 正常<br>                            不正常</p>
<pre><code>ctrl +c ctrl + z 
    解决： 
        1.删除交换文件 .2.log.swp

2.error 定位信息
    log 1w多行 

    行号： 
        尾行模式 ：set nu 
        取消行号：set nonu

3.常用快捷方式 
    dd 删除当前行
    dG删除当前行 以及 以下所有行
    ndd 删除当前行 以及 以下n行

    u 撤回

    gg 跳转到第一行的第一个字母
    G 跳转到最后一个的第一个字母
    shift +$ 跳转到 行尾
    shift +^ 跳转到 行头

    i o
场景： 
    清空这个文件内容 ？ 
     gg =&gt; dG 

    清空文件内容？
        1.gg =&gt; dG	
        2.linux =》 空的文件 
            cat /dev/null &gt; 3.log	 

        echo &quot;&quot; &gt; 3.log
    
场景： 
    shell 脚本 数据文件清空的操作 根据文件字节大小判断是否清空完成
    往文件里面写入数据

    if filesize &gt; 0 then 
        不操作
    else 
        log写入数据
</code></pre>
<p>9.系统相关命令<br>    内存：free<br>        [root@bigdata22 ~]# free -h<br>    磁盘：df<br>        [root@bigdata22 ~]# df -h<br>文件系统                 容量  已用  可用 已用% 挂载点<br>&#x2F;dev&#x2F;mapper&#x2F;centos-root   56G   23G   31G   42% &#x2F;</p>
<p>添加磁盘：<br>&#x2F;dev&#x2F;vdb1   10T   23G   31G   42% &#x2F;data01<br>&#x2F;dev&#x2F;vdb2   10T   23G   31G   42% &#x2F;data02<br>&#x2F;dev&#x2F;vdb3   10T   23G   31G   42% &#x2F;data03<br>&#x2F;dev&#x2F;vdb4   10T   23G   31G   42% &#x2F;data04</p>
<pre><code>负载：top
    top - 14:20:11 up  5:28,
    2 users
    load average: 0.00, 0.01, 0.05  
                5min  10min 15min
                经验值： 
                    超过10 说明你的机器 卡卡的 
                        20
                        99=》datax 同步任务 cpu
                        重启 =》
                            1.检查硬件是否有问题 
</code></pre>
<p>10.yum &#x2F; rpm </p>
<pre><code>linux centos 软件 

yum search  xxx   -- 需要联网 
yum install xxx   -- 需要联网
</code></pre>
<p>11.通讯命令<br>    ping ip<br>    telnet ip port</p>
<pre><code>1.ip =》hostname 
 172.10.100.1  &lt;=&gt; baidu01
2.端口： 
    1-65535  =》 防火墙决定的 

a =&gt; b : 
    1.ping b_ip 网络ok 可以进行通讯的
    2.a 访问b机器某个 服务的 端口 
        telnet b_ip port 
                     9527
</code></pre>
<p>a：<br>    win<br>    ping ip  &#x3D;》 检查网络是否通畅<br>b：<br>    linux 内网ip：192.168.10.22</p>
<pre><code>22 ssh 远程登录并执行
    连不上原因： 
        1.80 没有开放 
        2.80 没有服务

    win开启telnet功能： 
        1.控制面板=》程序=》打开或关闭wins功能=》telnet客户端选中
</code></pre>
<p>补充：<br>    1.工作中 安全问题<br>        ping ip 【不允许ping】<br>        telnet ip port</p>
<pre><code>2.linux telnet ： 
    yum install -y telnet
</code></pre>
<p>12.补充命令 -》 查看linux 系统命令、某个软件shell脚本 [命令] 是否存在<br>    which<br>        which ls<br>    whereis</p>
<pre><code>1.[root@bigdata22 ~]# banzhang
    bash: banzhang: 未找到命令...
        1.命令确实没有安装
        2.安装了 没有配置环境变量

2.whereis banzhang
</code></pre>
<p>13.修改机器名字<br>    去公司 0-1 搭建服务器：<br>    hostname<br>    hostnamectl  set-hostname bigdata99</p>
<p>14.解压缩<br>    zip<br>    gz &#x3D;&gt; gzip</p>
<p>zip:<br>    压缩：<br>        zip log.zip 1.log 2.log 3.log<br>    解压：<br>        unzip<br>        unzip  file[.zip]  [-d exdir]<br>            eg:<br>                unzip .&#x2F;log.zip<br>                unzip .&#x2F;log.zip -d .&#x2F;dir1<br>gzip:<br>    文件<br>    归档文件 tar</p>
<p>文件：1.log 2.log 3.log<br>归档文件: test.tar<br>    tar :<br>        归档：<br>            tar -cf test.tar 1.log 2.log 3.log<br>        解归档：<br>            test.tar<br>            tar -xf test.tar -C .&#x2F;dir2</p>
<p>归档文件 做一个压缩：gzip<br>    test.tar &#x3D;》 test.tar.gz<br>        压缩：<br>            tar -zcvf test2.tar.gz 1.log 2.log 3.log<br>        解压：<br>            tar -zxvf .&#x2F;test.tar.gz -C .&#x2F;dir3</p>
<p>15.yum<br>    yum search xxx<br>    yum install -y xxx</p>
<pre><code>httpd

centos 6:
    service httpd start|status|restart|stop

centos 7:
    service httpd start|status|restart|stop  兼容
    systemctl start|status|restart|stop  name...

启动： 
    systemctl start httpd  
进程： 
    ps -ef |  grep httpd

杀死进程： 
    kill -9 pid
    kill -9 $(pgrep -f httpd)
    补充： 
浏览器： http://ip:80
        https://ip:443

查端口： 
    netstat -nlp | grep httpd

:::80 =&gt; ip:80 web   
ip:80
0.0.0.0:80 
    外部机器可以访问 
    
    外部机器不可以访问
127.0.0.1:80  自己可以访问
localhost:80

curl localhost:80

补充： 
  kill -9 $(pgrep -f httpd)
</code></pre>
<p>app &#x3D;》pid<br>    思考：每个进程都会有 对外提供服务的端口么？<br>        不一定 </p>
<pre><code>场景： 
    大数据平台 webui 老板 找一下webui? port 忘记了 ？ 

    启动=》 进程名字 =》 ps -ef | grep name =&gt;pid 
    netstat -nlp | grep pid =&gt; port 
    ip:port
    
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Shell</title>
    <url>/2024/10/04/Shell/</url>
    <content><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><span id="more"></span>
<h2 id="1-什么是shell"><a href="#1-什么是shell" class="headerlink" title="1.什么是shell?"></a>1.什么是shell?</h2><pre><code>1.普通的文件
2.linux命令组成
3.编程语言
</code></pre>
<h1 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h1><h2 id="2-1-入门"><a href="#2-1-入门" class="headerlink" title="2.1 入门"></a>2.1 入门</h2><pre><code>1.文件命名 结尾 一般都是以 .sh 结尾
2.文件内容 第一行 #!/bin/bash 

1.编写脚本 
    wordcount  词频统计
    helloworld 

[root@bigdata99 shell]# cat wc.sh 
#!/bin/bash
echo &quot;www.bigdata.com&quot;

2.运行shell脚本
    1.sh xxx.sh
        [root@bigdata99 shell]# sh ./wc.sh 
        www.bigdata.com
    2.给脚本赋予 执行权限 
        chmod 744 ./wc.sh
        [root@bigdata99 shell]# ./wc.sh 
        www.bigdata.com
        [root@bigdata99 shell]# /root/shell/wc.sh
        www.bigdata.com

3.补充： 
    debug 
        1.[root@bigdata99 shell]# cat wc.sh 
            #!/bin/bash -x
            echo &quot;www.bigdata.com&quot;
        2.[root@bigdata99 shell]# sh -x wc.sh 
        + echo www.bigdata.com
        www.bigdata.com
</code></pre>
<h2 id="2-定义变量-与-引用"><a href="#2-定义变量-与-引用" class="headerlink" title="2.定义变量 与 引用"></a>2.定义变量 与 引用</h2><pre><code>1.变量的命名规范： 
    1.命名只能使用英文字母、数字、和下划线、不能以数字开头
    2.中间不能有空格、可以使用下划线
    3.不能使用linux里面的关键字

2.定义变量
    key=value
    注意： 
        1.=前后不能有空格

    1.静态： 
        k=v  k=&quot;v&quot; k=&#39;v&#39;
    2.动态
        k=`v`
引用： 
    $k 
    $&#123;k&#125;

    场景： 
        zs  
            zszhenshuai
</code></pre>
<h2 id="3-传递参数"><a href="#3-传递参数" class="headerlink" title="3.传递参数"></a>3.传递参数</h2><pre><code>脚本内获取脚本外的参数  脚本内定一个参数： 格式 $n
    1.n表示数字
    2.n=1 作为脚本的第一个参数 n=2作为脚本的第2个参数...
    3.n=0 获取脚本的名字
[root@bigdata99 shell]# ./parameter.sh &quot;hello&quot; &quot;zs&quot;
hello
zs
[root@bigdata99 shell]# cat parameter.sh 
echo &quot;文件名：$0&quot;
echo &quot;第一个参数：$1&quot;
echo &quot;第二个参数：$2&quot;
echo &quot;参数的个数：$#&quot;
echo &quot;传递的参数作为一个字符串：$*&quot;  
echo &quot;此脚本运行时的pid：$$&quot;

补充： 
    ps -ef | grep xxx  =&gt; pid 
    kill -9 pid 
</code></pre>
<h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h2><pre><code>语法格式： 
    1.元素 是 空格 进行分割 
    2.arr=(value1 value2 value3 ...)
[root@bigdata99 shell]# cat arr.sh 
arr=(zs lisi ww zl wrm)
echo &quot;所有数组元素：$&#123;arr[*]&#125;&quot; 
echo &quot;第2个元素：$&#123;arr[1]&#125;&quot;
echo &quot;数组元素个数：$&#123;#arr[*]&#125;&quot;
</code></pre>
<h2 id="5-流程控制"><a href="#5-流程控制" class="headerlink" title="5.流程控制"></a>5.流程控制</h2><pre><code>分支、循环 

1.if else 语法
    语法结构： 
    if condition;then
        command
    else 
        command
    fi

2.condition 条件判断 
    [ 表达式 ]
    1.值判断
        true false

        = 等于
        ==等于
        &lt;= &gt;= &gt; &lt; !=
        -eq 等于
        -ne 不等于
        -lt 小于
        -gt 大于 
        -le 小于等于
        -ge 大于等于

补充： 
    1.[] 前后要有空格 
    2.关系表达式 前后要有空格 
linux 获取上一个命令是否执行成功： 
    $? 
        成功 0  true
        不成功 非0 false

    2.权限判断:
        -r 
        -w 
        -x
    3.文件类型判断
        -d 
        -f 
        -e 
</code></pre>
<p>[root@bigdata99 shell]# cat if.sh<br>a&#x3D;”zs”<br>b&#x3D;”zs”<br>if [ ${a} &#x3D;&#x3D; ${b} ];then<br>    echo “&#x3D;&#x3D;”<br>else<br>    echo “!&#x3D;”<br>fi</p>
<pre><code>2.if elseif 语法
语法结构： 
    if condition;then
        command
    elif condition;then
        command
    else 
        command
    fi

    补充： &amp;&amp; ||
</code></pre>
<p>[root@bigdata99 shell]# cat ifelse.sh </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#统计期末成绩 优良差  </span><br><span class="line">#&gt;=<span class="number">90</span> 优  &gt;=<span class="number">60</span> 良  &lt;<span class="number">60</span> 差</span><br><span class="line"></span><br><span class="line">score=$<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> [ $&#123;score&#125; -ge <span class="number">90</span> ];then</span><br><span class="line">	echo <span class="string">&quot;优&quot;</span></span><br><span class="line">elif [ $&#123;score&#125; -ge <span class="number">60</span> ];then</span><br><span class="line">	echo <span class="string">&quot;良&quot;</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	echo <span class="string">&quot;差&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">	循环： </span><br><span class="line">		<span class="keyword">for</span>、<span class="keyword">while</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>: </span><br><span class="line">		语法结构 </span><br><span class="line">		<span class="keyword">for</span> x in item1 item2 item3 ... itemN</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">			command1</span><br><span class="line">			...</span><br><span class="line">		done</span><br><span class="line">	[root<span class="meta">@bigdata99</span> shell]# cat <span class="keyword">for</span>.sh </span><br><span class="line">	<span class="keyword">for</span> x in <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">	<span class="keyword">do</span> </span><br><span class="line">		echo $&#123;x&#125;</span><br><span class="line">	done</span><br></pre></td></tr></table></figure>
<pre><code>2. fori 
    打印 10以内的数字
    [root@bigdata99 shell]# cat fori.sh 
    for((i=0;i&lt;10;i++))
    do
        echo &quot;value is $&#123;i&#125;&quot;
    done

3.while
    语法结构： 
        while condition
        do 
            todo....
        done
    案例： 
        打印 10以内的数字
    
    [root@bigdata99 shell]# cat while.sh 
# 打印 10以内的数字

i=1
while ((i&lt;=10))
do
    echo $&#123;i&#125;
    let i++
done
</code></pre>
<p>场景：<br>    有一个字符串”zhangsan,lisi,zhaoliu”</p>
<pre><code>如何分割字符串？ 
    java  split（&quot;,&quot;） =》 array =》for
    linux  把, =》 空格    =》 array


    1.字符串替换： 
        str//,/ 
            =&gt;zhangsan,lisi,zhaoliu
            =&gt;zhangsan lisi zhaoliu
    [root@bigdata99 shell]# cat split.sh 
        str=&quot;zhangsan,lisi,zhaoliu&quot;
        arr=($&#123;str//,/ &#125;)
        for var in $&#123;arr[*]&#125;
        do
            echo $var
        done
    2.IFS变量进行字符串分割【了解】
</code></pre>
<h2 id="6-shell里面常用的分析工具"><a href="#6-shell里面常用的分析工具" class="headerlink" title="6.shell里面常用的分析工具"></a>6.shell里面常用的分析工具</h2><h2 id="1-awk-文本分析"><a href="#1-awk-文本分析" class="headerlink" title="1.awk 文本分析"></a>1.awk 文本分析</h2><h3 id="1-获取列数据"><a href="#1-获取列数据" class="headerlink" title="1.获取列数据"></a>1.获取列数据</h3><pre><code>        [root@bigdata99 ~]# cat test.log 
        a b c
        1 2 3
        [root@bigdata99 ~]# cat test.log | awk &#39;&#123;print $1&#125;&#39;
        a
        1
        [root@bigdata99 ~]# cat test.log | awk &#39;&#123;print $2&#125;&#39;
        b
        2
        [root@bigdata99 ~]# cat test.log | awk &#39;&#123;print $1,$2&#125;&#39;
        a b
        1 2
</code></pre>
<h3 id="2-获取行数据"><a href="#2-获取行数据" class="headerlink" title="2.获取行数据"></a>2.获取行数据</h3><pre><code>        [root@bigdata99 ~]# cat test.log | awk &#39;NR==1&#123;print&#125;&#39;
</code></pre>
<h2 id="2-sed"><a href="#2-sed" class="headerlink" title="2.sed"></a>2.sed</h2><pre><code>    文本替换
</code></pre>
<h3 id="1-文本中a-替换成d-每行第一次遇到a-替换成d-【不常用】"><a href="#1-文本中a-替换成d-每行第一次遇到a-替换成d-【不常用】" class="headerlink" title="1.文本中a 替换成d 每行第一次遇到a 替换成d  【不常用】"></a>1.文本中a 替换成d 每行第一次遇到a 替换成d  【不常用】</h3><pre><code>        sed -i  &#39;s/a/d/&#39;    test.log
</code></pre>
<h3 id="2-全文替换"><a href="#2-全文替换" class="headerlink" title="2.全文替换"></a>2.全文替换</h3><pre><code>        sed -i &#39;s/a/d/g&#39; test.log
    
    补充： 
        [root@bigdata99 ~]# cat path.log 
        p1=/data/log
        p2=/data/spark

    需求： 
        p2 值路径 替换成 /root 

        sed -i &#39;s//data/spark//root/g&#39;  path.log  错误的
        转义： \
        sed -i &#39;s/\/data\/spark/\/root/g&#39;  path.log

        [root@bigdata99 ~]# cat path.log 
        p1=/data/log
        p2=/root

        sed -i &#39;s#/root#/data/spark#g&#39; path.log
</code></pre>
<h1 id="1-机器克隆"><a href="#1-机器克隆" class="headerlink" title="1.机器克隆"></a>1.机器克隆</h1><h2 id="1-准备模板机"><a href="#1-准备模板机" class="headerlink" title="1.准备模板机"></a>1.准备模板机</h2><h2 id="2-网络配置-ip-静态ip"><a href="#2-网络配置-ip-静态ip" class="headerlink" title="2.网络配置  &#x3D;&gt; ip 静态ip"></a>2.网络配置  &#x3D;&gt; ip 静态ip</h2><pre><code>    网卡： 
        vim /etc/sysconfig/network-scripts/ifcfg-ens33
            BOOTPROTO=&quot;static&quot; 
            ONBOOT=&quot;yes&quot;
            IPADDR=192.168.41.11
            GATEWAY=192.168.41.2
            DNS1=192.168.41.2
</code></pre>
<h2 id="3-机器自带没用的东西-去除掉"><a href="#3-机器自带没用的东西-去除掉" class="headerlink" title="3.机器自带没用的东西 去除掉"></a>3.机器自带没用的东西 去除掉</h2><pre><code>        1.jdk卸载掉：
            rpm -qa | grep java
                xxx 
                xx
                x
            卸载： 
            rpm -e xxx --nodeps
            rpm -e xx --nodeps
            rpm -e x --nodeps
        2.hostname
            vim /etc/hostname
            bigdata11
        3.内网ip 与hostname 映射
            vim /etc/hosts

            192.168.41.11 bigdata11
            192.168.41.12 bigdata12
            192.168.41.13 bigdata13
            192.168.41.14 bigdata14
            192.168.41.15 bigdata15
            192.168.41.16 bigdata16
</code></pre>
<h2 id="4-防火墙关闭：打开所有端口"><a href="#4-防火墙关闭：打开所有端口" class="headerlink" title="4.防火墙关闭：打开所有端口"></a>4.防火墙关闭：打开所有端口</h2><pre><code>            systemctl status firewalld
            systemctl stop firewalld
            systemctl disable firewalld
</code></pre>
<h1 id="2-vmware-虚拟网络"><a href="#2-vmware-虚拟网络" class="headerlink" title="2.vmware 虚拟网络"></a>2.vmware 虚拟网络</h1><h2 id="1-关闭虚拟机"><a href="#1-关闭虚拟机" class="headerlink" title="1.关闭虚拟机"></a>1.关闭虚拟机</h2><h2 id="2-虚拟网络："><a href="#2-虚拟网络：" class="headerlink" title="2.虚拟网络："></a>2.虚拟网络：</h2><pre><code>        编辑=》虚拟网络=》vm8=》
            子网ip：192.168.41.0
            子网掩码：255.255.255.0
            nat设置：192.168.41.2
</code></pre>
<h2 id="3-开机："><a href="#3-开机：" class="headerlink" title="3.开机："></a>3.开机：</h2><pre><code>        验证内网ip ： ifconfig
            192.168.41.11 bigdata11
</code></pre>
<h2 id="4-远程登录"><a href="#4-远程登录" class="headerlink" title="4.远程登录"></a>4.远程登录</h2><pre><code>        xshell ： 
            ip 
            用户名
            密码
            port
</code></pre>
<h1 id="2-克隆机器"><a href="#2-克隆机器" class="headerlink" title="2.克隆机器"></a>2.克隆机器</h1><pre><code>    注意： 
        创建完整克隆
</code></pre>
<h2 id="1-修改克隆机器的内网ip"><a href="#1-修改克隆机器的内网ip" class="headerlink" title="1.修改克隆机器的内网ip"></a>1.修改克隆机器的内网ip</h2><pre><code>        vim /etc/sysconfig/network-scripts/ifcfg-ens33
</code></pre>
<h2 id="2-hostname"><a href="#2-hostname" class="headerlink" title="2.hostname"></a>2.hostname</h2><pre><code>        vim /etc/hostname
</code></pre>
<h2 id="3-重启机器"><a href="#3-重启机器" class="headerlink" title="3.重启机器"></a>3.重启机器</h2>]]></content>
  </entry>
  <entry>
    <title>java api</title>
    <url>/2024/10/02/java-api/</url>
    <content><![CDATA[<h1 id="java-api"><a href="#java-api" class="headerlink" title="java api"></a>java api</h1><span id="more"></span>
<h1 id="参数设置的优先级："><a href="#参数设置的优先级：" class="headerlink" title="参数设置的优先级："></a>参数设置的优先级：</h1><pre><code>1.默认配置文件
    core-default.xml
    hdfs-default.xml
    mapred-default.xml
    yarn-default.xml
2.生产配置文件
    core-site.xml
    hdfs-site.xml
    mapred-site.xml
    yarn-site.xml
3.代码里面设置的参数
     Configuration

优先级排序：代码里面设置的参数 》 生产配置文件 》 默认配置文件
</code></pre>
<h1 id="1-使用java-api-操作-hdfs在-创建文件夹"><a href="#1-使用java-api-操作-hdfs在-创建文件夹" class="headerlink" title="1.使用java api 操作 hdfs在 创建文件夹"></a>1.使用java api 操作 hdfs在 创建文件夹</h1><pre><code> /data/dt=20221114
 /data/dt=20221115
 /data/dt=20221116
</code></pre>
<h1 id="2-使用java-api-上传本地-wc-data-到上面三个目录下"><a href="#2-使用java-api-上传本地-wc-data-到上面三个目录下" class="headerlink" title="2.使用java api 上传本地 wc.data 到上面三个目录下"></a>2.使用java api 上传本地 wc.data 到上面三个目录下</h1><h1 id="3-使用java-api-将"><a href="#3-使用java-api-将" class="headerlink" title="3.使用java api 将"></a>3.使用java api 将</h1><pre><code>/data/dt=20221114/wc.data
/data/dt=20221115/wc.data
/data/dt=20221116/wc.data
目录下的文件移动到 指定目录 并进行改名字
/data/hive/20221114-01.data
/data/hive/20221115-01.data
/data/hive/20221116-01.data
</code></pre>
<h1 id="创建文件夹-上传-改名字"><a href="#创建文件夹-上传-改名字" class="headerlink" title="创建文件夹  上传 改名字"></a>创建文件夹  上传 改名字</h1><p> path:<br>    hdfspath  上传的path<br>    localpath  本地path<br>    filename   文件名字<br>    renamepath  修改文件的路径的path<br>    renamesufname 修改后文件的结尾<br>    dt         </p>
<p>hadoop jar &#x2F;home&#x2F;hadoop&#x2F;project&#x2F;DL2262-hdfsapi-1.0.jar <br>com.bigdata.HomeWork01 <br>“&#x2F;data&#x2F;dt&#x3D;” “file:&#x2F;&#x2F;&#x2F;&#x2F;home&#x2F;hadoop” “1.log” “&#x2F;data&#x2F;flink” “-01.data” “20221117”</p>
<p>start.sh<br>if [ $# -lt 6 ];then<br>    echo “Usage:put file to hdfs”<br>    echo “Usage:$0 <hdfspath> <localpath> <filename> <renamepath> <suffname> <dt>“<br>    echo “Usage:<hdfspath> is hdfs path”<br>    echo “eg:$0 ‘&#x2F;data&#x2F;dt&#x3D;’ ‘file:&#x2F;&#x2F;&#x2F;&#x2F;home&#x2F;hadoop’ ‘1.log’ ‘&#x2F;data&#x2F;flink’ ‘-01.data’ ‘20221117’”<br>    exit;<br>fi</p>
<p>hadoop jar &#x2F;home&#x2F;hadoop&#x2F;project&#x2F;DL2262-hdfsapi-1.0.jar <br>com.bigdata.HomeWork01 <br>“${1}” “${2}” “${3}” “${4}” “${5}” “${6}”</p>
<h1 id="HDFS：负责存储数据"><a href="#HDFS：负责存储数据" class="headerlink" title="HDFS：负责存储数据"></a>HDFS：负责存储数据</h1><pre><code>1.文件进行拆分 文件块
2.存储 拆分 文件块
</code></pre>
<h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><pre><code>hdfs主要存储文件 大文件  不是说 不能存储小文件
存储小文件 影响hdfs 性能
</code></pre>
<h1 id="block-块-："><a href="#block-块-：" class="headerlink" title="block 块 ："></a>block 块 ：</h1><pre><code>1.怎么来的？
    文件拆分来的 【按照 块大小 进行拆分】
2.属性：
    1.块大小 128M blocksize
    2.块的副本数:
        1.伪分布式 1
        2.完全分布式 3
            1.3  3
            2.&gt;3 3

本地文件大小：260M
块大小 ：128m

      块实际存储      规格【块大小】 128M
</code></pre>
<p> 第一块	   128M				128M<br> 第二块	   128M				128M<br> 第三块		4M				128M</p>
<h1 id="S假如："><a href="#S假如：" class="headerlink" title="S假如："></a>S假如：</h1><pre><code>一缸水 260L
一个瓶子 128l
</code></pre>
<p>第一个瓶子  128l   128L<br>第二个瓶子  128l<br>第三个瓶子  4L</p>
<p>160M 2个副本 问：<br>    1.文件拆分了块在hdfs上存了多少个块？<br>160M：<br>128M  &#x3D;&gt; 1<br>32M   &#x3D;&gt; 1<br>1+1 &#x3D;2 块  * 2 &#x3D; 4个块</p>
<pre><code>2.实际存储到hdfs 存储的大小是多少？
    160m * 2 = 320M
</code></pre>
<p>[hadoop@bigdata32 subdir0]$ pwd<br>&#x2F;home&#x2F;hadoop&#x2F;data&#x2F;hadoop&#x2F;dfs&#x2F;data&#x2F;current&#x2F;BP-155707757-192.168.41.32-1668441906801&#x2F;current&#x2F;finalized&#x2F;subdir0&#x2F;subdir0</p>
<p>练习：<br>    hdfs api 完成wordcount 统计</p>
<p>大数据处理：<br>    1.input<br>    2.处理<br>    3.output</p>
<pre><code>hdfs 存储一堆文件 让你统计每个单词出现的次数？
1.input
    hdfs 一些文件
    fs.open
2.处理
    词频统计
    1.读取进来的内容 一行一行的 ，按照某个规则指定分隔符 进行拆分 =》一个一个单词
    2.给每个单词 赋值为1
        a,a,a,b,b
     =&gt;
     	(a,1)
        (a,1)
        (a,1)
        (b,1)
        (b,1)
    3.将相同的单词 存起来 一个集合里面
        进行聚合统计 每个单词出现的次数
        &lt;a,1,1,1&gt;
        &lt;b,1,1&gt;
        =&gt;
        &lt;a,3&gt;
        &lt;b,2&gt;
3.output
    1.打印到控制台
    2.输出到hdfs上
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2024/10/04/MySQL/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><span id="more"></span>
<h1 id="使用场景？"><a href="#使用场景？" class="headerlink" title="使用场景？"></a>使用场景？</h1><pre><code>1.java开发人员 业务数据库
2.大数据组件 元数据 、结果数据 
</code></pre>
<h1 id="2-什么是mysql？"><a href="#2-什么是mysql？" class="headerlink" title="2.什么是mysql？"></a>2.什么是mysql？</h1><pre><code>1.关系型数据库： RDBMS  非关系型数据库NoSQL
    1.存储数据
    2.查询
2.类似表格
3.有行有列
</code></pre>
<h1 id="3-背景："><a href="#3-背景：" class="headerlink" title="3.背景："></a>3.背景：</h1><pre><code>处理数据 ：excel 
mysql： 
    存储数据，数据分析
    一堆类似excel的表格
</code></pre>
<h1 id="4-官网"><a href="#4-官网" class="headerlink" title="4.官网"></a>4.官网</h1><pre><code>www.mysql.com
</code></pre>
<h1 id="5-版本："><a href="#5-版本：" class="headerlink" title="5.版本："></a>5.版本：</h1><pre><code>8.x 不是主流、java团队 
5.7  it java 大数据 主流
5.6 目前公司也有
</code></pre>
<p>补充：<br>    上传下载：<br>        [root@bigdata31 software]# yum install -y lrzsz</p>
<pre><code>上传： rz 
下载 ：sz xxx
</code></pre>
<h1 id="6-部署："><a href="#6-部署：" class="headerlink" title="6.部署："></a>6.部署：</h1><pre><code>1.下载安装包  
    5.7
    安装包种类：
        rpm包 ：mysql source code =》 rpm包
            mysql-5.7.38-1.el7.x86_64.rpm-bundle.tar

        tar包：mysql source code +开发加的mysql代码 =》 编译打包生成 tar包

            mysql-5.7.38-el7-x86_64.tar.gz

准备好了： 
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="number">2.</span>安装部署</span><br><span class="line">		<span class="number">1.</span>上传mysql 安装包</span><br><span class="line">			[root<span class="meta">@bigdata31</span> software]# ll</span><br><span class="line">			total <span class="number">595272</span></span><br><span class="line">			-rw-r--r--. <span class="number">1</span> root root <span class="number">609556480</span> Aug <span class="number">26</span>  <span class="number">2021</span> mysql-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm-bundle.tar</span><br><span class="line">			[root<span class="meta">@bigdata31</span> software]# pwd</span><br><span class="line">			/root/software</span><br><span class="line"></span><br><span class="line">		<span class="number">2.</span>部署 </span><br><span class="line">			<span class="number">1.</span>解压</span><br><span class="line">			[root<span class="meta">@bigdata31</span> software]# tar -xvf ./mysql-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm-bundle.tar </span><br><span class="line">mysql-community-embedded-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-compat-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-devel-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-compat-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-test-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-common-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-devel-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-client-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">mysql-community-server-<span class="number">5.7</span><span class="number">.28</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<pre><code>2.安装 
    1.卸载 mariadb 相关的东西
    [root@bigdata31 software]# rpm -qa | grep mariadb
</code></pre>
<p>mariadb-libs-5.5.56-2.el7.x86_64<br>        [root@bigdata31 software]# rpm -e –nodeps mariadb-libs-5.5.56-2.el7.x86_64<br>[root@bigdata31 software]# rpm -qa | grep mariadb</p>
<pre><code>rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm 
注意： 
    package mariadb-libs conflicts with 
</code></pre>
<p>rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-libs-compat-5.7.28-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm<br>rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm</p>
<pre><code>3.有一个 配置文件 管控mysql 
    /etc/my.cnf

    mysql运行日志文件：log-error=/var/log/mysqld.log
4.初始化mysql 
        mysqld --initialize --user=mysql
    
     A temporary password is generated for root@localhost: rfnYYHj0jc,R

5.启动mysql 
    systemctl start mysqld 
    mysql 可以对外提供服务：
        port： 3306
6.登录mysql 使用
    mysql -uroot -prfnYYHj0jc,R

7.修改mysql 软件 root用户 密码
    set password = password(&#39;123456&#39;);
8.赋予权限 
    flush privileges;

补充： 
    卸载： 
        1.mysql 停掉 
            systemctl stop mysqld 
        2.mysql卸载 
            rpm -qa | grep mysql
            rpm -qa | grep mysql | xargs -n1 rpm -e --nodeps 
        3.linux存储目录删掉 
            find / -name &quot;*mysql*&quot; 
            注意：/sys/
        4.重装
    
    mysql 全部卸载重装


    shift + alt =&gt;多行编辑
    alt + tab 
    rm -rf xx 
</code></pre>
<p>mysql 数据库：<br>       excel 表格<br>       win：<br>       	 文件夹：<br>            一堆表格</p>
<p>MySQL:<br>    数据库：&#x3D;》文件夹 database<br>        一堆表格 table</p>
<p>远程登录工具：<br>    navcat 【选择】<br>    sqlyog<br>    dbvear工具 【选择】</p>
<pre><code>root@localhost: 123456
    只允许 当前机器登录
root@%: 123456
</code></pre>
<p>远程登录访问：<br>    1.修改 mysql 登录 运行用户的ip &#x3D;》 任意ip </p>
<p>mysql语法：【了解】<br>    1.查看数据库<br>        show databases;<br>    2.切换数据库<br>        use mysql;<br>    3.查看库下面有哪些表<br>        show tables;<br>    4.查看表中数据<br>    select host,user<br>    from user;<br>    5.修改表中数据<br>    update mysql.user set  host&#x3D;”%” where user&#x3D;”root”;<br>    6.刷新权限<br>    flush privileges; </p>
<p>基本语法：<br>    1.sql进行开发<br>        sql类型：<br>            ddl 数据定义语言 ：create drop  alter<br>            dml 数据操作语言 : insert select update delete<br>            dcl 数据控制语言 :grant [了解]<br>2.查看数据库<br>    SHOW {DATABASES | SCHEMAS}<br>    [LIKE ‘pattern’ | WHERE expr]</p>
<p>{} 必选参数 | 可选<br>[] 可选<br>    SHOW DATABASES;</p>
<p>mysql&gt; SHOW DATABASES;<br>+——————–+<br>| Database           |<br>+——————–+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+——————–+<br>4 rows in set (0.00 sec)</p>
<p>3.切换数据库<br>    use dbname;</p>
<p>4.查看数据库下面的表<br>    SHOW [FULL] TABLES<br>    [{FROM | IN} db_name]<br>    [LIKE ‘pattern’ | WHERE expr]<br>    SHOW TABLES;</p>
<p>mysql&gt; show tables FROM sys;</p>
<p>5.创建数据库<br>    CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name<br>    [create_option] …</p>
<p>create_option: [DEFAULT] {<br>    CHARACTER SET [&#x3D;] charset_name<br>  | COLLATE [&#x3D;] collation_name<br>}</p>
<p>CREATE DATABASE bigdata;</p>
<p>6.创建表<br>    excel ： </p>
<pre><code>字段：column : 
        1.名称
        2.字段类型
</code></pre>
<p>常用字段类型：<br>    数值类型：<br>        整数：<br>            int 整型<br>            long 长整型<br>        小数：<br>            float 单精度<br>            double 双精度<br>            decimal 小数 &#x3D;》 跟钱挂钩的<br>    字符串：<br>        char 字节  长度 0-255  bigdataxxxxxxx 255<br>        varchar 字符串 长度范围<br>    日期：<br>        date  日期： YYYY-MM-DD<br>        time 时间 ： HH:mm:SS<br>        datetime 年月日时分秒 ： YYYY-MM-DD HH:mm:SS<br>        timestamp 年月日时分秒【时间戳】:YYYY-MM-DD HH:mm:SS</p>
<p>列的名字、字段的名字<br>mysql&gt; CREATE TABLE user_table(<br>    -&gt; id int(3),<br>    -&gt; name varchar(10),<br>    -&gt; age int(3)<br>    -&gt; );<br>Query OK, 0 rows affected (0.01 sec)</p>
<p>mysql&gt; show tables;<br>+——————-+<br>| Tables_in_bigdata |<br>+——————-+<br>| user_table        |<br>+——————-+<br>1 row in set (0.00 sec)</p>
<p>7.表中插入数据 </p>
<p>INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]<br>    [INTO] tbl_name<br>    [(col_name [, col_name] …)]<br>    {VALUES | VALUE} (value_list) [, (value_list)] …<br>    [ON DUPLICATE KEY UPDATE assignment_list]</p>
<p>INSERT into user_table (id,name,age)VALUES (1,’zhangsan’,10);</p>
<p>8.查看数据</p>
<ul>
<li>表示所有字段</li>
</ul>
<p>select *<br>from user_table;</p>
<p>select name,age from user_table;</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2024/10/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据类型</title>
    <url>/2024/10/03/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="java的数据类型"><a href="#java的数据类型" class="headerlink" title="java的数据类型"></a>java的数据类型</h1><span id="more"></span>
<p>基本类型：8个基本类型。 类型首字母小写</p>
<p>引用类型： 对象类型。</p>
<h2 id="1-1-八个基本类型"><a href="#1-1-八个基本类型" class="headerlink" title="1.1 八个基本类型"></a>1.1 八个基本类型</h2><p> &#x2F;&#x2F; 0开头时8进制， 0b时二进制， 0x十六进制</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>byte 字节</td>
<td>8位，   8bit</td>
<td>-128-127<br />0111 1111     127<br /><br />1000 0000     -128</td>
<td>网络传输，文件的大小</td>
</tr>
<tr>
<td>short 短整型</td>
<td>2byte  16位</td>
<td>（-2的n-1次方~2的n-1次方-1）</td>
<td>16位计算机用</td>
</tr>
<tr>
<td>int 整型</td>
<td>4byte  32位</td>
<td></td>
<td>字面量</td>
</tr>
<tr>
<td>long 长整型</td>
<td>8byte  64位</td>
<td></td>
<td>毫秒数（1970-1-1凌晨到现在的毫秒数）</td>
</tr>
<tr>
<td>float 单精度浮点型</td>
<td>32位</td>
<td>默认大于整数</td>
<td>有效位数8位</td>
</tr>
<tr>
<td>double双精度浮点型</td>
<td>64</td>
<td></td>
<td>字面量。 浮点型都<code>不能</code>参与运算</td>
</tr>
<tr>
<td>boolean布尔型</td>
<td>1bit</td>
<td>true, false</td>
<td></td>
</tr>
<tr>
<td>char字符型</td>
<td>2byte 16位</td>
<td></td>
<td>和整数隐式转换， 可以参与运算</td>
</tr>
</tbody></table>
<h2 id="1-2-字符型"><a href="#1-2-字符型" class="headerlink" title="1.2 字符型"></a>1.2 字符型</h2><ul>
<li>ASCII码: 1byte范围 0~127</li>
</ul>
<p>0: 空字符<code> ‘’</code></p>
<p>32: 空格 <code>&#39; &#39;</code></p>
<p>49:  字符<code>&#39;1&#39;</code></p>
<p>65: ‘A’</p>
<p>97: ‘a’</p>
<ul>
<li>转义字符：</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">\&#x27;   \&quot;  \r  \n  \t   \\</span><br></pre></td></tr></table></figure>

<ul>
<li>Unicode码：  <code>\uFFFF</code> 四个十六进制数表示 两个字节的字符</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 定义byte型变量时 a1</span></span><br><span class="line">		<span class="type">byte</span> a1;</span><br><span class="line">		<span class="comment">// （编译时隐式转换） </span></span><br><span class="line">		a1 = <span class="number">127</span>; <span class="comment">// 0开头时8进制， 0b时二进制， 0x十六进制</span></span><br><span class="line">		<span class="comment">// byte a2 = 128; 超过范围</span></span><br><span class="line">		System.out.println(a1);</span><br><span class="line">		<span class="type">short</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="number">1024</span>; <span class="comment">// 字面量常亮数值1024 默认时int型的</span></span><br><span class="line">		System.out.println(a3);		</span><br><span class="line">		<span class="type">long</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="number">120</span>; <span class="comment">// 120 是32位</span></span><br><span class="line">		a4 = <span class="number">120L</span>; <span class="comment">// 120L 是64位</span></span><br><span class="line">		System.out.println(a4);</span><br><span class="line">		System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">		<span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.12345678901234567f</span>;</span><br><span class="line">		System.out.println(f);</span><br><span class="line">		<span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0.12345678901234567</span>;</span><br><span class="line">		System.out.println(d);</span><br><span class="line">		System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span>);</span><br><span class="line">		System.out.println(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">		System.out.println(a + <span class="number">0</span>);</span><br><span class="line">		<span class="type">char</span> <span class="variable">a5</span> <span class="operator">=</span> <span class="number">65</span>;</span><br><span class="line">		System.out.println( (<span class="type">char</span>)a5 );</span><br><span class="line">		<span class="type">char</span> <span class="variable">a6</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		System.out.println(a6 + <span class="number">0</span>);</span><br><span class="line">		System.out.println( (<span class="type">char</span>) <span class="number">57</span>);</span><br><span class="line">		System.out.println( <span class="string">&#x27;A&#x27;</span> &gt; <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">		System.out.println( <span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">		System.out.println( <span class="string">&#x27;	&#x27;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="type">char</span> <span class="variable">a7</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		System.out.println(a7);</span><br><span class="line">		</span><br><span class="line">		<span class="type">char</span> <span class="variable">a8</span> <span class="operator">=</span> <span class="string">&#x27;丁&#x27;</span>;</span><br><span class="line">		System.out.println(a8 + <span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="type">char</span> <span class="variable">a9</span> <span class="operator">=</span> <span class="string">&#x27;\u4E01&#x27;</span>; <span class="comment">// Unicode码</span></span><br><span class="line">		System.out.println(a9);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-3-基本类型转换"><a href="#1-3-基本类型转换" class="headerlink" title="1.3 基本类型转换"></a>1.3 基本类型转换</h2><p>小 转 大  隐式</p>
<p>大 转 小  强制转换<code>a = (byte) b;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">b = a; <span class="comment">// 小 转 大  隐式</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">11</span>;</span><br><span class="line">a = (<span class="type">byte</span>) b; <span class="comment">// 大 转 小  强制转换</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">a = (<span class="type">byte</span>) <span class="number">128</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// ???</span></span><br><span class="line"></span><br><span class="line">a = (<span class="type">byte</span>) <span class="number">1234</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// ???</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 32int ===&gt; 32浮点</span></span><br><span class="line"><span class="type">long</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a1 = (<span class="type">long</span>) f1; <span class="comment">// 32浮点  ===&gt; 64long </span></span><br></pre></td></tr></table></figure>
















]]></content>
  </entry>
</search>
